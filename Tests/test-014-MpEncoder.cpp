
#include <stdio.h>

#include "Multipath/MpEncoder.h"


bool test_encoding()
{
    constexpr uint32_t packet_size                  = 128u;

    BUFFER::BUFFER_T<packet_size> input             = { 0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0xc1, 0x2d, 0x62, 0x00, 0x04, 0x9e, 0x1a, 0xe4,
                                                        0x1c, 0xda, 0x24, 0x6e, 0xce, 0x2d, 0xcf, 0xb5,
                                                        0x63, 0x6c, 0x4f, 0x79, 0x14, 0x2f, 0x62, 0x2f,
                                                        0x0c, 0xcc, 0x37, 0x79, 0xbc, 0x67, 0x12, 0x7d,
                                                        0x95, 0x75, 0x7d, 0x99, 0x13, 0x97, 0x7d, 0x2f,
                                                        0x71, 0xa1, 0x9d, 0x3f, 0xce, 0x6d, 0xf4, 0x31,
                                                        0xd9, 0x43, 0xab, 0xed, 0x72, 0x0d, 0x1c, 0x7f,
                                                        0xd9, 0x54, 0xf8, 0x95, 0xbb, 0x0a, 0x12, 0x50,
                                                        0x7f, 0x8f, 0xe9, 0x92, 0x26, 0x66, 0xc1, 0x97,
                                                        0x07, 0x5f, 0xd6, 0xd6, 0xcc, 0xca, 0x07, 0xa5,
                                                        0x0e, 0xb2, 0x92, 0x80, 0xbf, 0xae, 0xff, 0x98,
                                                        0x02, 0xf7, 0x2d, 0xbe, 0x02, 0x3f, 0x0e, 0x81,
                                                        0xce, 0xf8, 0x14, 0xf4, 0x5e, 0xd5, 0x8b, 0x66,
                                                        0x34, 0x61, 0x3c, 0x00, 0x2c, 0x43, 0xa5, 0x3a, };

    BUFFER::BUFFER_T<packet_size> expected_output_0 = { 0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0xf2, 0xfb, 0xe3, 0x46, 0x7c, 0xc2, 0x54, 0xf8,
                                                        0x1b, 0xe8, 0xe7, 0x8d, 0x76, 0x5a, 0x2e, 0x63,
                                                        0x33, 0x9f, 0xc9, 0x9a, 0x66, 0x32, 0x0d, 0xb7,
                                                        0x31, 0x58, 0xa3, 0x5a, 0x25, 0x5d, 0x05, 0x17,
                                                        0x58, 0xe9, 0x5e, 0xd4, 0xab, 0xb2, 0xcd, 0xc6,
                                                        0x9b, 0xb4, 0x54, 0x11, 0x0e, 0x82, 0x74, 0x41,
                                                        0x21, 0x3d, 0xdc, 0x87, 0x70, 0xe9, 0x3e, 0xa1,
                                                        0x98, 0xb5, 0x04, 0xf2, 0x85, 0x0b, 0x6c, 0xc7,
                                                        0x95, 0x53, 0x82, 0x04, 0xa9, 0x5e, 0x9d, 0xbd,
                                                        0xeb, 0xef, 0xed, 0x2d, 0xfe, 0x65, 0x3b, 0xf1,
                                                        0xe2, 0xaa, 0x49, 0xdc, 0xbd, 0xb4, 0x01, 0xdb,
                                                        0xf9, 0x0d, 0x87, 0x84, 0xf9, 0x16, 0xdf, 0x67,
                                                        0xcb, 0xc4, 0x68, 0x60, 0x2b, 0x0d, 0x35, 0x07,
                                                        0xbd, 0x98, 0x60, 0xbb, 0x84, 0xda, 0xaa, 0xaf, };

    BUFFER::BUFFER_T<packet_size> expected_output_1 = { 0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x33, 0xd6, 0x81, 0x46, 0x78, 0x5c, 0x4e, 0x1c,
                                                        0x07, 0x32, 0xc3, 0xe3, 0xb8, 0x77, 0xe1, 0xd6,
                                                        0x50, 0xf3, 0x86, 0xe3, 0x72, 0x1d, 0x6f, 0x98,
                                                        0x3d, 0x94, 0x94, 0x23, 0x99, 0x3a, 0x17, 0x6a,
                                                        0xcd, 0x9c, 0x23, 0x4d, 0xb8, 0x25, 0xb0, 0xe9,
                                                        0xea, 0x15, 0xc9, 0x2e, 0xc0, 0xef, 0x80, 0x70,
                                                        0xf8, 0x7e, 0x77, 0x6a, 0x02, 0xe4, 0x22, 0xde,
                                                        0x41, 0xe1, 0xfc, 0x67, 0x3e, 0x01, 0x7e, 0x97,
                                                        0xea, 0xdc, 0x6b, 0x96, 0x8f, 0x38, 0x5c, 0x2a,
                                                        0xec, 0xb0, 0x3b, 0xfb, 0x32, 0xaf, 0x3c, 0x54,
                                                        0xec, 0x18, 0xdb, 0x5c, 0x02, 0x1a, 0xfe, 0x43,
                                                        0xfb, 0xfa, 0xaa, 0x3a, 0xfb, 0x29, 0xd1, 0xe6,
                                                        0x05, 0x3c, 0x7c, 0x94, 0x75, 0xd8, 0xbe, 0x61,
                                                        0x89, 0xf9, 0x5c, 0xbb, 0xa8, 0x99, 0x0f, 0x95, };

    BUFFER::BUFFER_T<packet_size> expected_output_2 = { 0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x80, 0xcc, 0x9e, 0x67, 0x3a, 0x9f, 0x64, 0x73,
                                                        0xf6, 0x06, 0x4f, 0xf8, 0x41, 0x15, 0x93, 0x9f,
                                                        0x8f, 0xdc, 0x74, 0x82, 0x26, 0x80, 0x5e, 0x7b,
                                                        0xe0, 0xd4, 0xec, 0x25, 0xbe, 0x7d, 0xec, 0x3e,
                                                        0x6e, 0x8f, 0xd7, 0xa3, 0xe8, 0xbe, 0xac, 0xc9,
                                                        0x74, 0x9d, 0xe1, 0xab, 0xbb, 0xb5, 0x4a, 0x50,
                                                        0x50, 0xba, 0xf7, 0x56, 0xda, 0x94, 0x13, 0xea,
                                                        0x2b, 0xaf, 0x1b, 0xd3, 0xc7, 0xc8, 0x46, 0xa8,
                                                        0x64, 0x67, 0x0e, 0x1f, 0x50, 0x3c, 0xef, 0xf4,
                                                        0x34, 0xc0, 0x1f, 0x4c, 0xaa, 0xf8, 0x0a, 0x12,
                                                        0x3f, 0xea, 0x31, 0xda, 0x9a, 0xf3, 0xfa, 0x8f,
                                                        0x5a, 0x1e, 0x73, 0x6a, 0xa9, 0x8d, 0xc3, 0x47,
                                                        0x55, 0x4c, 0x40, 0xe5, 0x50, 0x57, 0xff, 0x27,
                                                        0x15, 0x5c, 0xe0, 0x87, 0x5c, 0xaa, 0x9b, 0x9b, };

    BUFFER::BUFFER_T<packet_size> key               = { 0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0xf2, 0xfb, 0xe3, 0x46, 0x7c, 0xc2, 0x54, 0xf8,
                                                        0x1b, 0xe8, 0xe7, 0x8d, 0x76, 0x5a, 0x2e, 0x63,
                                                        0x33, 0x9f, 0xc9, 0x9a, 0x66, 0x32, 0x0d, 0xb7,
                                                        0x31, 0x58, 0xa3, 0x5a, 0x25, 0x5d, 0x05, 0x17,
                                                        0x58, 0xe9, 0x5e, 0xd4, 0xab, 0xb2, 0xcd, 0xc6,
                                                        0x9b, 0xb4, 0x54, 0x11, 0x0e, 0x82, 0x74, 0x41,
                                                        0x21, 0x3d, 0xdc, 0x87, 0x70, 0xe9, 0x3e, 0xa1,
                                                        0x41, 0xe1, 0xfc, 0x67, 0x3e, 0x01, 0x7e, 0x97,
                                                        0xea, 0xdc, 0x6b, 0x96, 0x8f, 0x38, 0x5c, 0x2a,
                                                        0xec, 0xb0, 0x3b, 0xfb, 0x32, 0xaf, 0x3c, 0x54,
                                                        0xec, 0x18, 0xdb, 0x5c, 0x02, 0x1a, 0xfe, 0x43,
                                                        0xfb, 0xfa, 0xaa, 0x3a, 0xfb, 0x29, 0xd1, 0xe6,
                                                        0x05, 0x3c, 0x7c, 0x94, 0x75, 0xd8, 0xbe, 0x61,
                                                        0x89, 0xf9, 0x5c, 0xbb, 0xa8, 0x99, 0x0f, 0x95, };

    BUFFER::BUFFER_T<packet_size> output_0{};
    BUFFER::BUFFER_T<packet_size> output_1{};
    BUFFER::BUFFER_T<packet_size> output_2{};

    if (!MULTIPATH::encode_buffer(output_0, output_1, output_2, input, key))
    {
        fprintf(stderr, "%s:%d:%s: Failed to encoder\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    if (memcmp(&output_0, &expected_output_0, sizeof(BUFFER::BUFFER_T<packet_size>)))
    {
        fprintf(stderr, "%s:%d:%s: Invalid output\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    if (memcmp(&output_1, &expected_output_1, sizeof(BUFFER::BUFFER_T<packet_size>)))
    {
        fprintf(stderr, "%s:%d:%s: Invalid output\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    if (memcmp(&output_2, &expected_output_2, sizeof(BUFFER::BUFFER_T<packet_size>)))
    {
        fprintf(stderr, "%s:%d:%s: Invalid output\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    return true;
}


bool test_decoding_01()
{
    constexpr uint32_t packet_size                  = 128u;

    BUFFER::BUFFER_T<packet_size> input_0           = { 0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0xf2, 0xfb, 0xe3, 0x46, 0x7c, 0xc2, 0x54, 0xf8,
                                                        0x1b, 0xe8, 0xe7, 0x8d, 0x76, 0x5a, 0x2e, 0x63,
                                                        0x33, 0x9f, 0xc9, 0x9a, 0x66, 0x32, 0x0d, 0xb7,
                                                        0x31, 0x58, 0xa3, 0x5a, 0x25, 0x5d, 0x05, 0x17,
                                                        0x58, 0xe9, 0x5e, 0xd4, 0xab, 0xb2, 0xcd, 0xc6,
                                                        0x9b, 0xb4, 0x54, 0x11, 0x0e, 0x82, 0x74, 0x41,
                                                        0x21, 0x3d, 0xdc, 0x87, 0x70, 0xe9, 0x3e, 0xa1,
                                                        0x98, 0xb5, 0x04, 0xf2, 0x85, 0x0b, 0x6c, 0xc7,
                                                        0x95, 0x53, 0x82, 0x04, 0xa9, 0x5e, 0x9d, 0xbd,
                                                        0xeb, 0xef, 0xed, 0x2d, 0xfe, 0x65, 0x3b, 0xf1,
                                                        0xe2, 0xaa, 0x49, 0xdc, 0xbd, 0xb4, 0x01, 0xdb,
                                                        0xf9, 0x0d, 0x87, 0x84, 0xf9, 0x16, 0xdf, 0x67,
                                                        0xcb, 0xc4, 0x68, 0x60, 0x2b, 0x0d, 0x35, 0x07,
                                                        0xbd, 0x98, 0x60, 0xbb, 0x84, 0xda, 0xaa, 0xaf, };

    BUFFER::BUFFER_T<packet_size> input_1           = { 0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x33, 0xd6, 0x81, 0x46, 0x78, 0x5c, 0x4e, 0x1c,
                                                        0x07, 0x32, 0xc3, 0xe3, 0xb8, 0x77, 0xe1, 0xd6,
                                                        0x50, 0xf3, 0x86, 0xe3, 0x72, 0x1d, 0x6f, 0x98,
                                                        0x3d, 0x94, 0x94, 0x23, 0x99, 0x3a, 0x17, 0x6a,
                                                        0xcd, 0x9c, 0x23, 0x4d, 0xb8, 0x25, 0xb0, 0xe9,
                                                        0xea, 0x15, 0xc9, 0x2e, 0xc0, 0xef, 0x80, 0x70,
                                                        0xf8, 0x7e, 0x77, 0x6a, 0x02, 0xe4, 0x22, 0xde,
                                                        0x41, 0xe1, 0xfc, 0x67, 0x3e, 0x01, 0x7e, 0x97,
                                                        0xea, 0xdc, 0x6b, 0x96, 0x8f, 0x38, 0x5c, 0x2a,
                                                        0xec, 0xb0, 0x3b, 0xfb, 0x32, 0xaf, 0x3c, 0x54,
                                                        0xec, 0x18, 0xdb, 0x5c, 0x02, 0x1a, 0xfe, 0x43,
                                                        0xfb, 0xfa, 0xaa, 0x3a, 0xfb, 0x29, 0xd1, 0xe6,
                                                        0x05, 0x3c, 0x7c, 0x94, 0x75, 0xd8, 0xbe, 0x61,
                                                        0x89, 0xf9, 0x5c, 0xbb, 0xa8, 0x99, 0x0f, 0x95, };

     BUFFER::BUFFER_T<packet_size> expected_output  = { 0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0xc1, 0x2d, 0x62, 0x00, 0x04, 0x9e, 0x1a, 0xe4,
                                                        0x1c, 0xda, 0x24, 0x6e, 0xce, 0x2d, 0xcf, 0xb5,
                                                        0x63, 0x6c, 0x4f, 0x79, 0x14, 0x2f, 0x62, 0x2f,
                                                        0x0c, 0xcc, 0x37, 0x79, 0xbc, 0x67, 0x12, 0x7d,
                                                        0x95, 0x75, 0x7d, 0x99, 0x13, 0x97, 0x7d, 0x2f,
                                                        0x71, 0xa1, 0x9d, 0x3f, 0xce, 0x6d, 0xf4, 0x31,
                                                        0xd9, 0x43, 0xab, 0xed, 0x72, 0x0d, 0x1c, 0x7f,
                                                        0xd9, 0x54, 0xf8, 0x95, 0xbb, 0x0a, 0x12, 0x50,
                                                        0x7f, 0x8f, 0xe9, 0x92, 0x26, 0x66, 0xc1, 0x97,
                                                        0x07, 0x5f, 0xd6, 0xd6, 0xcc, 0xca, 0x07, 0xa5,
                                                        0x0e, 0xb2, 0x92, 0x80, 0xbf, 0xae, 0xff, 0x98,
                                                        0x02, 0xf7, 0x2d, 0xbe, 0x02, 0x3f, 0x0e, 0x81,
                                                        0xce, 0xf8, 0x14, 0xf4, 0x5e, 0xd5, 0x8b, 0x66,
                                                        0x34, 0x61, 0x3c, 0x00, 0x2c, 0x43, 0xa5, 0x3a, };

    BUFFER::BUFFER_T<packet_size> key               = { 0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0xf2, 0xfb, 0xe3, 0x46, 0x7c, 0xc2, 0x54, 0xf8,
                                                        0x1b, 0xe8, 0xe7, 0x8d, 0x76, 0x5a, 0x2e, 0x63,
                                                        0x33, 0x9f, 0xc9, 0x9a, 0x66, 0x32, 0x0d, 0xb7,
                                                        0x31, 0x58, 0xa3, 0x5a, 0x25, 0x5d, 0x05, 0x17,
                                                        0x58, 0xe9, 0x5e, 0xd4, 0xab, 0xb2, 0xcd, 0xc6,
                                                        0x9b, 0xb4, 0x54, 0x11, 0x0e, 0x82, 0x74, 0x41,
                                                        0x21, 0x3d, 0xdc, 0x87, 0x70, 0xe9, 0x3e, 0xa1,
                                                        0x41, 0xe1, 0xfc, 0x67, 0x3e, 0x01, 0x7e, 0x97,
                                                        0xea, 0xdc, 0x6b, 0x96, 0x8f, 0x38, 0x5c, 0x2a,
                                                        0xec, 0xb0, 0x3b, 0xfb, 0x32, 0xaf, 0x3c, 0x54,
                                                        0xec, 0x18, 0xdb, 0x5c, 0x02, 0x1a, 0xfe, 0x43,
                                                        0xfb, 0xfa, 0xaa, 0x3a, 0xfb, 0x29, 0xd1, 0xe6,
                                                        0x05, 0x3c, 0x7c, 0x94, 0x75, 0xd8, 0xbe, 0x61,
                                                        0x89, 0xf9, 0x5c, 0xbb, 0xa8, 0x99, 0x0f, 0x95, };

    BUFFER::BUFFER_T<packet_size> output{};

    if (!MULTIPATH::decode_buffer(output, input_0, input_1, MULTIPATH::TYPE_DOUBLE::TYPE_01))
    {
        fprintf(stderr, "%s:%d:%s: Failed to decoder\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    if (memcmp(&output, &expected_output, sizeof(BUFFER::BUFFER_T<packet_size>)))
    {
        fprintf(stderr, "%s:%d:%s: Invalid output\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    return true;
}


bool test_decoding_02()
{
    constexpr uint32_t packet_size                  = 128u;

    BUFFER::BUFFER_T<packet_size> input_0           = { 0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0xf2, 0xfb, 0xe3, 0x46, 0x7c, 0xc2, 0x54, 0xf8,
                                                        0x1b, 0xe8, 0xe7, 0x8d, 0x76, 0x5a, 0x2e, 0x63,
                                                        0x33, 0x9f, 0xc9, 0x9a, 0x66, 0x32, 0x0d, 0xb7,
                                                        0x31, 0x58, 0xa3, 0x5a, 0x25, 0x5d, 0x05, 0x17,
                                                        0x58, 0xe9, 0x5e, 0xd4, 0xab, 0xb2, 0xcd, 0xc6,
                                                        0x9b, 0xb4, 0x54, 0x11, 0x0e, 0x82, 0x74, 0x41,
                                                        0x21, 0x3d, 0xdc, 0x87, 0x70, 0xe9, 0x3e, 0xa1,
                                                        0x98, 0xb5, 0x04, 0xf2, 0x85, 0x0b, 0x6c, 0xc7,
                                                        0x95, 0x53, 0x82, 0x04, 0xa9, 0x5e, 0x9d, 0xbd,
                                                        0xeb, 0xef, 0xed, 0x2d, 0xfe, 0x65, 0x3b, 0xf1,
                                                        0xe2, 0xaa, 0x49, 0xdc, 0xbd, 0xb4, 0x01, 0xdb,
                                                        0xf9, 0x0d, 0x87, 0x84, 0xf9, 0x16, 0xdf, 0x67,
                                                        0xcb, 0xc4, 0x68, 0x60, 0x2b, 0x0d, 0x35, 0x07,
                                                        0xbd, 0x98, 0x60, 0xbb, 0x84, 0xda, 0xaa, 0xaf, };

    BUFFER::BUFFER_T<packet_size> input_2           = { 0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x80, 0xcc, 0x9e, 0x67, 0x3a, 0x9f, 0x64, 0x73,
                                                        0xf6, 0x06, 0x4f, 0xf8, 0x41, 0x15, 0x93, 0x9f,
                                                        0x8f, 0xdc, 0x74, 0x82, 0x26, 0x80, 0x5e, 0x7b,
                                                        0xe0, 0xd4, 0xec, 0x25, 0xbe, 0x7d, 0xec, 0x3e,
                                                        0x6e, 0x8f, 0xd7, 0xa3, 0xe8, 0xbe, 0xac, 0xc9,
                                                        0x74, 0x9d, 0xe1, 0xab, 0xbb, 0xb5, 0x4a, 0x50,
                                                        0x50, 0xba, 0xf7, 0x56, 0xda, 0x94, 0x13, 0xea,
                                                        0x2b, 0xaf, 0x1b, 0xd3, 0xc7, 0xc8, 0x46, 0xa8,
                                                        0x64, 0x67, 0x0e, 0x1f, 0x50, 0x3c, 0xef, 0xf4,
                                                        0x34, 0xc0, 0x1f, 0x4c, 0xaa, 0xf8, 0x0a, 0x12,
                                                        0x3f, 0xea, 0x31, 0xda, 0x9a, 0xf3, 0xfa, 0x8f,
                                                        0x5a, 0x1e, 0x73, 0x6a, 0xa9, 0x8d, 0xc3, 0x47,
                                                        0x55, 0x4c, 0x40, 0xe5, 0x50, 0x57, 0xff, 0x27,
                                                        0x15, 0x5c, 0xe0, 0x87, 0x5c, 0xaa, 0x9b, 0x9b, };

    BUFFER::BUFFER_T<packet_size> expected_output   = { 0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0xc1, 0x2d, 0x62, 0x00, 0x04, 0x9e, 0x1a, 0xe4,
                                                        0x1c, 0xda, 0x24, 0x6e, 0xce, 0x2d, 0xcf, 0xb5,
                                                        0x63, 0x6c, 0x4f, 0x79, 0x14, 0x2f, 0x62, 0x2f,
                                                        0x0c, 0xcc, 0x37, 0x79, 0xbc, 0x67, 0x12, 0x7d,
                                                        0x95, 0x75, 0x7d, 0x99, 0x13, 0x97, 0x7d, 0x2f,
                                                        0x71, 0xa1, 0x9d, 0x3f, 0xce, 0x6d, 0xf4, 0x31,
                                                        0xd9, 0x43, 0xab, 0xed, 0x72, 0x0d, 0x1c, 0x7f,
                                                        0xd9, 0x54, 0xf8, 0x95, 0xbb, 0x0a, 0x12, 0x50,
                                                        0x7f, 0x8f, 0xe9, 0x92, 0x26, 0x66, 0xc1, 0x97,
                                                        0x07, 0x5f, 0xd6, 0xd6, 0xcc, 0xca, 0x07, 0xa5,
                                                        0x0e, 0xb2, 0x92, 0x80, 0xbf, 0xae, 0xff, 0x98,
                                                        0x02, 0xf7, 0x2d, 0xbe, 0x02, 0x3f, 0x0e, 0x81,
                                                        0xce, 0xf8, 0x14, 0xf4, 0x5e, 0xd5, 0x8b, 0x66,
                                                        0x34, 0x61, 0x3c, 0x00, 0x2c, 0x43, 0xa5, 0x3a, };

    BUFFER::BUFFER_T<packet_size> key               = { 0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0xf2, 0xfb, 0xe3, 0x46, 0x7c, 0xc2, 0x54, 0xf8,
                                                        0x1b, 0xe8, 0xe7, 0x8d, 0x76, 0x5a, 0x2e, 0x63,
                                                        0x33, 0x9f, 0xc9, 0x9a, 0x66, 0x32, 0x0d, 0xb7,
                                                        0x31, 0x58, 0xa3, 0x5a, 0x25, 0x5d, 0x05, 0x17,
                                                        0x58, 0xe9, 0x5e, 0xd4, 0xab, 0xb2, 0xcd, 0xc6,
                                                        0x9b, 0xb4, 0x54, 0x11, 0x0e, 0x82, 0x74, 0x41,
                                                        0x21, 0x3d, 0xdc, 0x87, 0x70, 0xe9, 0x3e, 0xa1,
                                                        0x41, 0xe1, 0xfc, 0x67, 0x3e, 0x01, 0x7e, 0x97,
                                                        0xea, 0xdc, 0x6b, 0x96, 0x8f, 0x38, 0x5c, 0x2a,
                                                        0xec, 0xb0, 0x3b, 0xfb, 0x32, 0xaf, 0x3c, 0x54,
                                                        0xec, 0x18, 0xdb, 0x5c, 0x02, 0x1a, 0xfe, 0x43,
                                                        0xfb, 0xfa, 0xaa, 0x3a, 0xfb, 0x29, 0xd1, 0xe6,
                                                        0x05, 0x3c, 0x7c, 0x94, 0x75, 0xd8, 0xbe, 0x61,
                                                        0x89, 0xf9, 0x5c, 0xbb, 0xa8, 0x99, 0x0f, 0x95, };

    BUFFER::BUFFER_T<packet_size> output{};

    if (!MULTIPATH::decode_buffer(output, input_0, input_2, MULTIPATH::TYPE_DOUBLE::TYPE_02))
    {
        fprintf(stderr, "%s:%d:%s: Failed to decoder\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    if (memcmp(&output, &expected_output, sizeof(BUFFER::BUFFER_T<packet_size>)))
    {
        fprintf(stderr, "%s:%d:%s: Invalid output\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    return true;
}


bool test_decoding_12()
{
    constexpr uint32_t packet_size      = 128u;

    BUFFER::BUFFER_T<packet_size> input_1           = { 0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x33, 0xd6, 0x81, 0x46, 0x78, 0x5c, 0x4e, 0x1c,
                                                        0x07, 0x32, 0xc3, 0xe3, 0xb8, 0x77, 0xe1, 0xd6,
                                                        0x50, 0xf3, 0x86, 0xe3, 0x72, 0x1d, 0x6f, 0x98,
                                                        0x3d, 0x94, 0x94, 0x23, 0x99, 0x3a, 0x17, 0x6a,
                                                        0xcd, 0x9c, 0x23, 0x4d, 0xb8, 0x25, 0xb0, 0xe9,
                                                        0xea, 0x15, 0xc9, 0x2e, 0xc0, 0xef, 0x80, 0x70,
                                                        0xf8, 0x7e, 0x77, 0x6a, 0x02, 0xe4, 0x22, 0xde,
                                                        0x41, 0xe1, 0xfc, 0x67, 0x3e, 0x01, 0x7e, 0x97,
                                                        0xea, 0xdc, 0x6b, 0x96, 0x8f, 0x38, 0x5c, 0x2a,
                                                        0xec, 0xb0, 0x3b, 0xfb, 0x32, 0xaf, 0x3c, 0x54,
                                                        0xec, 0x18, 0xdb, 0x5c, 0x02, 0x1a, 0xfe, 0x43,
                                                        0xfb, 0xfa, 0xaa, 0x3a, 0xfb, 0x29, 0xd1, 0xe6,
                                                        0x05, 0x3c, 0x7c, 0x94, 0x75, 0xd8, 0xbe, 0x61,
                                                        0x89, 0xf9, 0x5c, 0xbb, 0xa8, 0x99, 0x0f, 0x95, };

    BUFFER::BUFFER_T<packet_size> input_2           = { 0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x80, 0xcc, 0x9e, 0x67, 0x3a, 0x9f, 0x64, 0x73,
                                                        0xf6, 0x06, 0x4f, 0xf8, 0x41, 0x15, 0x93, 0x9f,
                                                        0x8f, 0xdc, 0x74, 0x82, 0x26, 0x80, 0x5e, 0x7b,
                                                        0xe0, 0xd4, 0xec, 0x25, 0xbe, 0x7d, 0xec, 0x3e,
                                                        0x6e, 0x8f, 0xd7, 0xa3, 0xe8, 0xbe, 0xac, 0xc9,
                                                        0x74, 0x9d, 0xe1, 0xab, 0xbb, 0xb5, 0x4a, 0x50,
                                                        0x50, 0xba, 0xf7, 0x56, 0xda, 0x94, 0x13, 0xea,
                                                        0x2b, 0xaf, 0x1b, 0xd3, 0xc7, 0xc8, 0x46, 0xa8,
                                                        0x64, 0x67, 0x0e, 0x1f, 0x50, 0x3c, 0xef, 0xf4,
                                                        0x34, 0xc0, 0x1f, 0x4c, 0xaa, 0xf8, 0x0a, 0x12,
                                                        0x3f, 0xea, 0x31, 0xda, 0x9a, 0xf3, 0xfa, 0x8f,
                                                        0x5a, 0x1e, 0x73, 0x6a, 0xa9, 0x8d, 0xc3, 0x47,
                                                        0x55, 0x4c, 0x40, 0xe5, 0x50, 0x57, 0xff, 0x27,
                                                        0x15, 0x5c, 0xe0, 0x87, 0x5c, 0xaa, 0x9b, 0x9b, };

    BUFFER::BUFFER_T<packet_size> expected_output   = { 0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0xc1, 0x2d, 0x62, 0x00, 0x04, 0x9e, 0x1a, 0xe4,
                                                        0x1c, 0xda, 0x24, 0x6e, 0xce, 0x2d, 0xcf, 0xb5,
                                                        0x63, 0x6c, 0x4f, 0x79, 0x14, 0x2f, 0x62, 0x2f,
                                                        0x0c, 0xcc, 0x37, 0x79, 0xbc, 0x67, 0x12, 0x7d,
                                                        0x95, 0x75, 0x7d, 0x99, 0x13, 0x97, 0x7d, 0x2f,
                                                        0x71, 0xa1, 0x9d, 0x3f, 0xce, 0x6d, 0xf4, 0x31,
                                                        0xd9, 0x43, 0xab, 0xed, 0x72, 0x0d, 0x1c, 0x7f,
                                                        0xd9, 0x54, 0xf8, 0x95, 0xbb, 0x0a, 0x12, 0x50,
                                                        0x7f, 0x8f, 0xe9, 0x92, 0x26, 0x66, 0xc1, 0x97,
                                                        0x07, 0x5f, 0xd6, 0xd6, 0xcc, 0xca, 0x07, 0xa5,
                                                        0x0e, 0xb2, 0x92, 0x80, 0xbf, 0xae, 0xff, 0x98,
                                                        0x02, 0xf7, 0x2d, 0xbe, 0x02, 0x3f, 0x0e, 0x81,
                                                        0xce, 0xf8, 0x14, 0xf4, 0x5e, 0xd5, 0x8b, 0x66,
                                                        0x34, 0x61, 0x3c, 0x00, 0x2c, 0x43, 0xa5, 0x3a, };

    BUFFER::BUFFER_T<packet_size> key               = { 0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0x00, 0x00, 0x00, 0x00,
                                                        0xf2, 0xfb, 0xe3, 0x46, 0x7c, 0xc2, 0x54, 0xf8,
                                                        0x1b, 0xe8, 0xe7, 0x8d, 0x76, 0x5a, 0x2e, 0x63,
                                                        0x33, 0x9f, 0xc9, 0x9a, 0x66, 0x32, 0x0d, 0xb7,
                                                        0x31, 0x58, 0xa3, 0x5a, 0x25, 0x5d, 0x05, 0x17,
                                                        0x58, 0xe9, 0x5e, 0xd4, 0xab, 0xb2, 0xcd, 0xc6,
                                                        0x9b, 0xb4, 0x54, 0x11, 0x0e, 0x82, 0x74, 0x41,
                                                        0x21, 0x3d, 0xdc, 0x87, 0x70, 0xe9, 0x3e, 0xa1,
                                                        0x41, 0xe1, 0xfc, 0x67, 0x3e, 0x01, 0x7e, 0x97,
                                                        0xea, 0xdc, 0x6b, 0x96, 0x8f, 0x38, 0x5c, 0x2a,
                                                        0xec, 0xb0, 0x3b, 0xfb, 0x32, 0xaf, 0x3c, 0x54,
                                                        0xec, 0x18, 0xdb, 0x5c, 0x02, 0x1a, 0xfe, 0x43,
                                                        0xfb, 0xfa, 0xaa, 0x3a, 0xfb, 0x29, 0xd1, 0xe6,
                                                        0x05, 0x3c, 0x7c, 0x94, 0x75, 0xd8, 0xbe, 0x61,
                                                        0x89, 0xf9, 0x5c, 0xbb, 0xa8, 0x99, 0x0f, 0x95, };

    BUFFER::BUFFER_T<packet_size> output{};

    if (!MULTIPATH::decode_buffer(output, input_1, input_2, MULTIPATH::TYPE_DOUBLE::TYPE_12))
    {
        fprintf(stderr, "%s:%d:%s: Failed to decoder\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    if (memcmp(&output, &expected_output, sizeof(BUFFER::BUFFER_T<packet_size>)))
    {
        fprintf(stderr, "%s:%d:%s: Invalid output\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    return true;
}


int main(int argc, char** argv)
{
    if (!test_encoding())
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    if (!test_decoding_01())
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    if (!test_decoding_02())
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    if (!test_decoding_12())
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    return 0;
}
