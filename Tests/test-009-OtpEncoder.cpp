
#include <stdint.h>
#include <stdio.h>
#include <string>
#include <string.h>

#include "OneTimePad/OtpEncoder.h"


namespace
{
    constexpr uint32_t packet_size = 128u;
}


void print_encoding(std::string                     Tag,
                    BUFFER::BUFFER_T<packet_size>&  DataPlain,
                    BUFFER::BUFFER_T<packet_size>&  Key,
                    BUFFER::BUFFER_T<packet_size>&  DataEncoded)
{
    printf("*** %s ***\n", Tag.c_str());

    printf("Plain:\n");
    BUFFER::print(DataPlain);

    printf("Key:\n");
    BUFFER::print(Key);

    printf("Encoded:\n");
    BUFFER::print(DataEncoded);

    printf("\n");
}


void print_decoding(std::string                     Tag,
                    BUFFER::BUFFER_T<packet_size>&  DataEncoded,
                    BUFFER::BUFFER_T<packet_size>&  Key,
                    BUFFER::BUFFER_T<packet_size>&  DataDecoded)
{
    printf("*** %s ***\n", Tag.c_str());

    printf("Encoded:\n");
    BUFFER::print(DataEncoded);

    printf("Key:\n");
    BUFFER::print(Key);

    printf("Decoded:\n");
    BUFFER::print(DataDecoded);

    printf("\n");
}


bool test_encoding(BUFFER::BUFFER_T<packet_size>&   DataExpected,
                   BUFFER::BUFFER_T<packet_size>&   DataInput,
                   BUFFER::BUFFER_T<packet_size>&   Key)
{
    if (!ONETIMEPAD::encode(DataInput, Key))
    {
        fprintf(stderr, "%s:%d:%s: Failed to encode\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    if (memcmp(&DataExpected, &DataInput, sizeof(DataInput)))
    {
        fprintf(stderr, "%s:%d:%s: Incorrect output\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    return true;
}


bool test_decoding(BUFFER::BUFFER_T<packet_size>&   DataExpected,
                   BUFFER::BUFFER_T<packet_size>&   DataInput,
                   BUFFER::BUFFER_T<packet_size>&   Key)
{
    if (!ONETIMEPAD::decode(DataInput, Key))
    {
        fprintf(stderr, "%s:%d:%s: Failed to encode\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    if (memcmp(&DataExpected, &DataInput, sizeof(DataInput)))
    {
        fprintf(stderr, "%s:%d:%s: Incorrect output\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    return true;
}


int main(int argc, char** argv)
{
    uint32_t                        seed_3_u            = 33u;
    uint32_t                        seed_3_d            = 1234u;

    BUFFER::BUFFER_T<packet_size>   input               {};

    BUFFER::BUFFER_T<packet_size>   key                 = { 0x5f, 0xd9, 0x2f, 0x6f, 0x53, 0x85, 0x3c, 0x01, 0x0b, 0xb2, 0x12, 0x4a, 0x21, 0xaf, 0x89, 0xe0,
                                                            0xc2, 0x58, 0x80, 0xae, 0xfc, 0x10, 0x26, 0x36, 0x2a, 0x14, 0x2e, 0x42, 0x9e, 0x80, 0xaf, 0x20,
                                                            0x8f, 0xc4, 0x61, 0x59, 0xdd, 0x05, 0xaf, 0x88, 0xda, 0x98, 0xf7, 0x27, 0x60, 0x00, 0x4b, 0x30,
                                                            0xcd, 0x07, 0xf3, 0x07, 0x5c, 0x59, 0x9d, 0x4c, 0xdf, 0x12, 0x53, 0xd1, 0x00, 0x00, 0x00, 0x00,
                                                            0x5f, 0xd9, 0x2f, 0x6f, 0x53, 0x85, 0x3c, 0x01, 0x0b, 0xb2, 0x12, 0x4a, 0x21, 0xaf, 0x89, 0xe0,
                                                            0xc2, 0x58, 0x80, 0xae, 0xfc, 0x10, 0x26, 0x36, 0x2a, 0x14, 0x2e, 0x42, 0x9e, 0x80, 0xaf, 0x20,
                                                            0x8f, 0xc4, 0x61, 0x59, 0xdd, 0x05, 0xaf, 0x88, 0xda, 0x98, 0xf7, 0x27, 0x60, 0x00, 0x4b, 0x30,
                                                            0xcd, 0x07, 0xf3, 0x07, 0x5c, 0x59, 0x9d, 0x4c, 0xdf, 0x12, 0x53, 0xd1, 0x00, 0x00, 0x00, 0x00 };

    BUFFER::BUFFER_T<packet_size>   data_plain_1_u      = { 0x5f, 0xd9, 0x2f, 0x6f, 0x53, 0x85, 0x3c, 0x01, 0x0b, 0xb2, 0x12, 0x4a, 0x21, 0xaf, 0x89, 0xe0,
                                                            0xc2, 0x58, 0x80, 0xae, 0xfc, 0x10, 0x26, 0x36, 0x2a, 0x14, 0x2e, 0x42, 0x9e, 0x80, 0xaf, 0x20,
                                                            0x8f, 0xc4, 0x61, 0x59, 0xdd, 0x05, 0xaf, 0x88, 0xda, 0x98, 0xf7, 0x27, 0x60, 0x00, 0x4b, 0x30,
                                                            0xcd, 0x07, 0xf3, 0x07, 0x5c, 0x59, 0x9d, 0x4c, 0xdf, 0x12, 0x53, 0xd1, 0x00, 0x00, 0x00, 0x00,
                                                            0x5f, 0xd9, 0x2f, 0x6f, 0x53, 0x85, 0x3c, 0x01, 0x0b, 0xb2, 0x12, 0x4a, 0x21, 0xaf, 0x89, 0xe0,
                                                            0xc2, 0x58, 0x80, 0xae, 0xfc, 0x10, 0x26, 0x36, 0x2a, 0x14, 0x2e, 0x42, 0x9e, 0x80, 0xaf, 0x20,
                                                            0x8f, 0xc4, 0x61, 0x59, 0xdd, 0x05, 0xaf, 0x88, 0xda, 0x98, 0xf7, 0x27, 0x60, 0x00, 0x4b, 0x30,
                                                            0xcd, 0x07, 0xf3, 0x07, 0x5c, 0x59, 0x9d, 0x4c, 0xdf, 0x12, 0x53, 0xd1, 0x00, 0x00, 0x00, 0x00 };

    BUFFER::BUFFER_T<packet_size>   data_encoded_1_u    = { 0xbe, 0xb2, 0x5e, 0xde, 0xa6, 0x0a, 0x78, 0x02, 0x16, 0x64, 0x24, 0x94, 0x42, 0x5e, 0x12, 0xc0,
                                                            0x84, 0xb0, 0x00, 0x5c, 0xf8, 0x20, 0x4c, 0x6c, 0x54, 0x28, 0x5c, 0x84, 0x3c, 0x00, 0x5e, 0x40,
                                                            0x1e, 0x88, 0xc2, 0xb2, 0xba, 0x0a, 0x5e, 0x10, 0xb4, 0x30, 0xee, 0x4e, 0xc0, 0x00, 0x96, 0x60,
                                                            0x9a, 0x0e, 0xe6, 0x0e, 0xb8, 0xb2, 0x3a, 0x98, 0xbe, 0x24, 0xa6, 0xa2, 0x00, 0x00, 0x00, 0x00,
                                                            0xbe, 0xb2, 0x5e, 0xde, 0xa6, 0x0a, 0x78, 0x02, 0x16, 0x64, 0x24, 0x94, 0x42, 0x5e, 0x12, 0xc0,
                                                            0x84, 0xb0, 0x00, 0x5c, 0xf8, 0x20, 0x4c, 0x6c, 0x54, 0x28, 0x5c, 0x84, 0x3c, 0x00, 0x5e, 0x40,
                                                            0x1e, 0x88, 0xc2, 0xb2, 0xba, 0x0a, 0x5e, 0x10, 0xb4, 0x30, 0xee, 0x4e, 0xc0, 0x00, 0x96, 0x60,
                                                            0x9a, 0x0e, 0xe6, 0x0e, 0xb8, 0xb2, 0x3a, 0x98, 0xbe, 0x24, 0xa6, 0xa2, 0x00, 0x00, 0x00, 0x00 };

    BUFFER::BUFFER_T<packet_size>   data_plain_1_d      = { 0x5f, 0xd9, 0x2f, 0x6f, 0x53, 0x85, 0x3c, 0x01, 0x0b, 0xb2, 0x12, 0x4a, 0x21, 0xaf, 0x89, 0xe0,
                                                            0xc2, 0x58, 0x80, 0xae, 0xfc, 0x10, 0x26, 0x36, 0x2a, 0x14, 0x2e, 0x42, 0x9e, 0x80, 0xaf, 0x20,
                                                            0x8f, 0xc4, 0x61, 0x59, 0xdd, 0x05, 0xaf, 0x88, 0xda, 0x98, 0xf7, 0x27, 0x60, 0x00, 0x4b, 0x30,
                                                            0xcd, 0x07, 0xf3, 0x07, 0x5c, 0x59, 0x9d, 0x4c, 0xdf, 0x12, 0x53, 0xd1, 0x00, 0x00, 0x00, 0x00,
                                                            0x5f, 0xd9, 0x2f, 0x6f, 0x53, 0x85, 0x3c, 0x01, 0x0b, 0xb2, 0x12, 0x4a, 0x21, 0xaf, 0x89, 0xe0,
                                                            0xc2, 0x58, 0x80, 0xae, 0xfc, 0x10, 0x26, 0x36, 0x2a, 0x14, 0x2e, 0x42, 0x9e, 0x80, 0xaf, 0x20,
                                                            0x8f, 0xc4, 0x61, 0x59, 0xdd, 0x05, 0xaf, 0x88, 0xda, 0x98, 0xf7, 0x27, 0x60, 0x00, 0x4b, 0x30,
                                                            0xcd, 0x07, 0xf3, 0x07, 0x5c, 0x59, 0x9d, 0x4c, 0xdf, 0x12, 0x53, 0xd1, 0x00, 0x00, 0x00, 0x00  };

    BUFFER::BUFFER_T<packet_size>   data_encoded_1_d    = { 0xbe, 0xb2, 0x5e, 0xde, 0xa6, 0x0a, 0x78, 0x02, 0x16, 0x64, 0x24, 0x94, 0x42, 0x5e, 0x12, 0xc0,
                                                            0x84, 0xb0, 0x00, 0x5c, 0xf8, 0x20, 0x4c, 0x6c, 0x54, 0x28, 0x5c, 0x84, 0x3c, 0x00, 0x5e, 0x40,
                                                            0x1e, 0x88, 0xc2, 0xb2, 0xba, 0x0a, 0x5e, 0x10, 0xb4, 0x30, 0xee, 0x4e, 0xc0, 0x00, 0x96, 0x60,
                                                            0x9a, 0x0e, 0xe6, 0x0e, 0xb8, 0xb2, 0x3a, 0x98, 0xbe, 0x24, 0xa6, 0xa2, 0x00, 0x00, 0x00, 0x00,
                                                            0xbe, 0xb2, 0x5e, 0xde, 0xa6, 0x0a, 0x78, 0x02, 0x16, 0x64, 0x24, 0x94, 0x42, 0x5e, 0x12, 0xc0,
                                                            0x84, 0xb0, 0x00, 0x5c, 0xf8, 0x20, 0x4c, 0x6c, 0x54, 0x28, 0x5c, 0x84, 0x3c, 0x00, 0x5e, 0x40,
                                                            0x1e, 0x88, 0xc2, 0xb2, 0xba, 0x0a, 0x5e, 0x10, 0xb4, 0x30, 0xee, 0x4e, 0xc0, 0x00, 0x96, 0x60,
                                                            0x9a, 0x0e, 0xe6, 0x0e, 0xb8, 0xb2, 0x3a, 0x98, 0xbe, 0x24, 0xa6, 0xa2, 0x00, 0x00, 0x00, 0x00 };

    BUFFER::BUFFER_T<packet_size>   data_plain_2_u      = { 0x8f, 0xc4, 0x61, 0x59, 0xdd, 0x05, 0xaf, 0x88, 0xda, 0x98, 0xf7, 0x27, 0x60, 0x00, 0x4b, 0x30,
                                                            0x5f, 0xd9, 0x2f, 0x6f, 0x53, 0x85, 0x3c, 0x01, 0x0b, 0xb2, 0x12, 0x4a, 0x21, 0xaf, 0x89, 0xe0,
                                                            0xcd, 0x07, 0xf3, 0x07, 0x5c, 0x59, 0x9d, 0x4c, 0xdf, 0x12, 0x53, 0xd1, 0x00, 0x00, 0x00, 0x00,
                                                            0xc2, 0x58, 0x80, 0xae, 0xfc, 0x10, 0x26, 0x36, 0x2a, 0x14, 0x2e, 0x42, 0x00, 0x00, 0x00, 0x00,
                                                            0x8f, 0xc4, 0x61, 0x59, 0xdd, 0x05, 0xaf, 0x88, 0xda, 0x98, 0xf7, 0x27, 0x60, 0x00, 0x4b, 0x30,
                                                            0x5f, 0xd9, 0x2f, 0x6f, 0x53, 0x85, 0x3c, 0x01, 0x0b, 0xb2, 0x12, 0x4a, 0x21, 0xaf, 0x89, 0xe0,
                                                            0xcd, 0x07, 0xf3, 0x07, 0x5c, 0x59, 0x9d, 0x4c, 0xdf, 0x12, 0x53, 0xd1, 0x00, 0x00, 0x00, 0x00,
                                                            0xc2, 0x58, 0x80, 0xae, 0xfc, 0x10, 0x26, 0x36, 0x2a, 0x14, 0x2e, 0x42, 0x00, 0x00, 0x00, 0x00 };

    BUFFER::BUFFER_T<packet_size>   data_encoded_2_u    = { 0xee, 0x9d, 0x90, 0xc8, 0x30, 0x8a, 0xeb, 0x89, 0xe5, 0x4a, 0x09, 0x71, 0x81, 0xaf, 0xd4, 0x10,
                                                            0x21, 0x31, 0xaf, 0x1d, 0x4f, 0x95, 0x62, 0x37, 0x35, 0xc6, 0x40, 0x8c, 0xbf, 0x2f, 0x38, 0x00,
                                                            0x5c, 0xcb, 0x54, 0x60, 0x39, 0x5e, 0x4c, 0xd4, 0xb9, 0xaa, 0x4a, 0xf8, 0x60, 0x00, 0x4b, 0x30,
                                                            0x8f, 0x5f, 0x73, 0xb5, 0x58, 0x69, 0xc3, 0x82, 0x09, 0x26, 0x81, 0x13, 0x00, 0x00, 0x00, 0x00,
                                                            0xee, 0x9d, 0x90, 0xc8, 0x30, 0x8a, 0xeb, 0x89, 0xe5, 0x4a, 0x09, 0x71, 0x81, 0xaf, 0xd4, 0x10,
                                                            0x21, 0x31, 0xaf, 0x1d, 0x4f, 0x95, 0x62, 0x37, 0x35, 0xc6, 0x40, 0x8c, 0xbf, 0x2f, 0x38, 0x00,
                                                            0x5c, 0xcb, 0x54, 0x60, 0x39, 0x5e, 0x4c, 0xd4, 0xb9, 0xaa, 0x4a, 0xf8, 0x60, 0x00, 0x4b, 0x30,
                                                            0x8f, 0x5f, 0x73, 0xb5, 0x58, 0x69, 0xc3, 0x82, 0x09, 0x26, 0x81, 0x13, 0x00, 0x00, 0x00, 0x00 };

    BUFFER::BUFFER_T<packet_size>   data_plain_2_d      = { 0x8f, 0xc4, 0x61, 0x59, 0xdd, 0x05, 0xaf, 0x88, 0xda, 0x98, 0xf7, 0x27, 0x60, 0x00, 0x4b, 0x30,
                                                            0x5f, 0xd9, 0x2f, 0x6f, 0x53, 0x85, 0x3c, 0x01, 0x0b, 0xb2, 0x12, 0x4a, 0x21, 0xaf, 0x89, 0xe0,
                                                            0xcd, 0x07, 0xf3, 0x07, 0x5c, 0x59, 0x9d, 0x4c, 0xdf, 0x12, 0x53, 0xd1, 0x00, 0x00, 0x00, 0x00,
                                                            0xc2, 0x58, 0x80, 0xae, 0xfc, 0x10, 0x26, 0x36, 0x2a, 0x14, 0x2e, 0x42, 0x00, 0x00, 0x00, 0x00,
                                                            0x8f, 0xc4, 0x61, 0x59, 0xdd, 0x05, 0xaf, 0x88, 0xda, 0x98, 0xf7, 0x27, 0x60, 0x00, 0x4b, 0x30,
                                                            0x5f, 0xd9, 0x2f, 0x6f, 0x53, 0x85, 0x3c, 0x01, 0x0b, 0xb2, 0x12, 0x4a, 0x21, 0xaf, 0x89, 0xe0,
                                                            0xcd, 0x07, 0xf3, 0x07, 0x5c, 0x59, 0x9d, 0x4c, 0xdf, 0x12, 0x53, 0xd1, 0x00, 0x00, 0x00, 0x00,
                                                            0xc2, 0x58, 0x80, 0xae, 0xfc, 0x10, 0x26, 0x36, 0x2a, 0x14, 0x2e, 0x42, 0x00, 0x00, 0x00, 0x00 };

    BUFFER::BUFFER_T<packet_size>   data_encoded_2_d    = { 0xee, 0x9d, 0x90, 0xc8, 0x30, 0x8a, 0xeb, 0x89, 0xe5, 0x4a, 0x09, 0x71, 0x81, 0xaf, 0xd4, 0x10,
                                                            0x21, 0x31, 0xaf, 0x1d, 0x4f, 0x95, 0x62, 0x37, 0x35, 0xc6, 0x40, 0x8c, 0xbf, 0x2f, 0x38, 0x00,
                                                            0x5c, 0xcb, 0x54, 0x60, 0x39, 0x5e, 0x4c, 0xd4, 0xb9, 0xaa, 0x4a, 0xf8, 0x60, 0x00, 0x4b, 0x30,
                                                            0x8f, 0x5f, 0x73, 0xb5, 0x58, 0x69, 0xc3, 0x82, 0x09, 0x26, 0x81, 0x13, 0x00, 0x00, 0x00, 0x00,
                                                            0xee, 0x9d, 0x90, 0xc8, 0x30, 0x8a, 0xeb, 0x89, 0xe5, 0x4a, 0x09, 0x71, 0x81, 0xaf, 0xd4, 0x10,
                                                            0x21, 0x31, 0xaf, 0x1d, 0x4f, 0x95, 0x62, 0x37, 0x35, 0xc6, 0x40, 0x8c, 0xbf, 0x2f, 0x38, 0x00,
                                                            0x5c, 0xcb, 0x54, 0x60, 0x39, 0x5e, 0x4c, 0xd4, 0xb9, 0xaa, 0x4a, 0xf8, 0x60, 0x00, 0x4b, 0x30,
                                                            0x8f, 0x5f, 0x73, 0xb5, 0x58, 0x69, 0xc3, 0x82, 0x09, 0x26, 0x81, 0x13, 0x00, 0x00, 0x00, 0x00 };

    memcpy(&input, &data_plain_1_u, sizeof(data_plain_1_u));

    if (!test_encoding(data_encoded_1_u, input, key))
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    print_encoding("Uplink encoding", data_plain_1_u, key, input);

    memcpy(&input, &data_plain_1_d, sizeof(data_plain_1_u));

    if (!test_encoding(data_encoded_1_d, input, key))
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    print_encoding("Downlink encoding", data_plain_1_d, key, input);

    memcpy(&input, &data_plain_2_u, sizeof(data_plain_1_d));

    if (!test_encoding(data_encoded_2_u, input, key))
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    print_encoding("Uplink encoding", data_plain_2_u, key, input);

    memcpy(&input, &data_plain_2_d, sizeof(data_plain_2_u));

    if (!test_encoding(data_encoded_2_d, input, key))
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    print_encoding("Downlink encoding", data_plain_2_d, key, input);

    memcpy(&input, &data_encoded_1_u, sizeof(data_plain_2_d));

    if (!test_decoding(data_plain_1_u, input, key))
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    print_decoding("Uplink decoding", data_encoded_1_u, key, input);

    memcpy(&input, &data_encoded_1_d, sizeof(data_encoded_1_u));

    if (!test_decoding(data_plain_1_d, input, key))
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    print_decoding("Downlink decoding", data_encoded_1_d, key, input);

    memcpy(&input, &data_encoded_2_u, sizeof(data_encoded_1_d));

    if (!test_decoding(data_plain_2_u, input, key))
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    print_decoding("Uplink decoding", data_encoded_2_u, key, input);

    memcpy(&input, &data_encoded_2_d, sizeof(data_encoded_2_u));

    if (!test_decoding(data_plain_2_d, input, key))
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    print_decoding("Downlink decoding", data_encoded_2_d, key, input);

    return 0;
}
