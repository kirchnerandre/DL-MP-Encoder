
#include <stdio.h>
#include <string>

#include "Multipath/MpFrames.h"


bool test_frames()
{
    constexpr uint32_t                              packet_size     = 128u;
    constexpr uint32_t                              width           = 10u;
    constexpr uint32_t                              height          = 10u;

    constexpr uint8_t                               exp_frame_0[]   = { 0x1c, 0xda, 0x24, 0x6e, 0xce, 0x2d, 0xcf, 0xb5, 0x63, 0x6c,
                                                                        0x4f, 0x79, 0x14, 0x2f, 0x62, 0x2f, 0x0c, 0xcc, 0x37, 0x79,
                                                                        0xbc, 0x67, 0x12, 0x7d, 0x95, 0x75, 0x7d, 0x99, 0x13, 0x97,
                                                                        0x7d, 0x2f, 0x71, 0xa1, 0x9d, 0x3f, 0xce, 0x6d, 0xf4, 0x31,
                                                                        0xd9, 0x43, 0xab, 0xed, 0x72, 0x0d, 0x1c, 0x7f, 0xd9, 0x54,
                                                                        0xf8, 0x95, 0xbb, 0x0a, 0x12, 0x50, 0x7f, 0x8f, 0xe9, 0x92,
                                                                        0x26, 0x66, 0xc1, 0x97, 0x07, 0x5f, 0xd6, 0xd6, 0xcc, 0xca,
                                                                        0x07, 0xa5, 0x0e, 0xb2, 0x92, 0x80, 0xbf, 0xae, 0xff, 0x98,
                                                                        0x02, 0xf7, 0x2d, 0xbe, 0x02, 0x3f, 0x0e, 0x81, 0xce, 0xf8,
                                                                        0x14, 0xf4, 0x5e, 0xd5, 0x8b, 0x66, 0x34, 0x61, 0x3c, 0x00, };

    BUFFER::BUFFER_T<packet_size>                   input_00        = { 0x00, 0x00, 0x00, 0x00,
                                                                        0x00, 0x00, 0x00, 0x00,
                                                                        0x00, 0x00, 0x00, 0x00,
                                                                        0x00, 0x00, 0x00, 0x00,
                                                                        0x7c, 0xc2, 0x54, 0xf8, 0x1b, 0xe8, 0xe7, 0x8d, 0x76, 0x5a, 0x2e, 0x63, 0x33, 0x9f, 0xc9, 0x9a,
                                                                        0x66, 0x32, 0x0d, 0xb7, 0x31, 0x58, 0xa3, 0x5a, 0x25, 0x5d, 0x05, 0x17, 0x58, 0xe9, 0x5e, 0xd4,
                                                                        0xab, 0xb2, 0xcd, 0xc6, 0x9b, 0xb4, 0x54, 0x11, 0x0e, 0x82, 0x74, 0x41, 0x21, 0x3d, 0xdc, 0x87,
                                                                        0x70, 0xe9, 0xc6, 0x34, 0xfa, 0xeb, 0xee, 0x37, 0x41, 0x8e, 0x97, 0x05, 0xcc, 0xba, 0xaa, 0x01,
                                                                        0x88, 0x67, 0x8a, 0xfc, 0x20, 0x7a, 0x3c, 0x5e, 0x3c, 0x1d, 0xae, 0xd4, 0x53, 0xb6, 0x24, 0xc4,
                                                                        0x00, 0xed, 0xd3, 0xfd, 0xf9, 0xc5, 0xa4, 0xbb, 0x35, 0xd1, 0xc5, 0x12, 0x5b, 0xe9, 0xf7, 0xf2,
                                                                        0x41, 0xb9, 0x82, 0x61, 0xa5, 0xba, 0xf9, 0x81, 0x5e, 0xae, 0xb5, 0x20, 0x00, 0x00, 0x00, 0x00 };

    BUFFER::BUFFER_T<packet_size>                   input_01        = { 0x00, 0x00, 0x00, 0x00,
                                                                        0x00, 0x00, 0x00, 0x00,
                                                                        0x00, 0x00, 0x00, 0x00,
                                                                        0x00, 0x00, 0x00, 0x00,
                                                                        0x60, 0x18, 0x70, 0x96, 0xd5, 0xc5, 0x28, 0x38, 0x15, 0x36, 0x61, 0x1a, 0x27, 0xb0, 0xab, 0xb5,
                                                                        0x6a, 0xfe, 0x3a, 0xce, 0x8d, 0x3f, 0xb1, 0x27, 0xb0, 0x28, 0x78, 0x8e, 0x4b, 0x7e, 0x23, 0xfb,
                                                                        0xda, 0x13, 0x50, 0xf9, 0x55, 0xd9, 0xa0, 0x20, 0xd7, 0xc1, 0xdf, 0xac, 0x53, 0x30, 0xc0, 0xf8,
                                                                        0xa9, 0xbd, 0x3e, 0xa1, 0x41, 0xe1, 0xfc, 0x67, 0x3e, 0x01, 0x7e, 0x97, 0xea, 0xdc, 0x6b, 0x96,
                                                                        0x8f, 0x38, 0x5c, 0x2a, 0xec, 0xb0, 0x3b, 0xfb, 0x32, 0xaf, 0x3c, 0x54, 0xec, 0x18, 0xdb, 0x5c,
                                                                        0x02, 0x1a, 0xfe, 0x43, 0xfb, 0xfa, 0xaa, 0x3a, 0xfb, 0x29, 0xd1, 0xe6, 0x05, 0x3c, 0x7c, 0x94,
                                                                        0x75, 0xd8, 0xbe, 0x61, 0x89, 0xf9, 0x5c, 0xbb, 0xa8, 0x99, 0x0f, 0x95, 0x00, 0x00, 0x00, 0x00 };

    constexpr uint8_t                               exp_frame_1[]   = { 0xc3, 0xc8, 0x98, 0x1f, 0x00, 0x77, 0xd7, 0x7e, 0x21, 0xa9,
                                                                        0xa7, 0xda, 0xde, 0x98, 0x91, 0x7e, 0xad, 0x9f, 0x8c, 0xb0,
                                                                        0xb7, 0xcc, 0x59, 0x39, 0xef, 0x2b, 0x58, 0x6a, 0x1f, 0xa9,
                                                                        0x2a, 0x01, 0xae, 0x08, 0x2f, 0x91, 0xe1, 0xb7, 0x32, 0xd8,
                                                                        0x48, 0x69, 0xe6, 0xb6, 0xf2, 0x33, 0x15, 0xe7, 0xd2, 0x36,
                                                                        0x68, 0x10, 0xfb, 0x4a, 0x0e, 0x9c, 0xe0, 0x0b, 0xc1, 0xa8,
                                                                        0x69, 0x76, 0x3d, 0xf2, 0x96, 0x88, 0x8e, 0xef, 0xd1, 0x36,
                                                                        0xfd, 0xa0, 0xa1, 0x1a, 0xf9, 0x05, 0x83, 0x41, 0x6d, 0x9a,
                                                                        0x84, 0xf0, 0x0d, 0xf4, 0x5f, 0xc1, 0x08, 0xbc, 0x3b, 0x9e,
                                                                        0x72, 0x80, 0x08, 0xa7, 0x44, 0xc3, 0x6e, 0xf2, 0x46, 0xc3, };

    BUFFER::BUFFER_T<packet_size>                   input_10        = { 0x00, 0x00, 0x00, 0x00,
                                                                        0x00, 0x00, 0x00, 0x01,
                                                                        0x00, 0x00, 0x00, 0x00,
                                                                        0x00, 0x00, 0x00, 0x00,
                                                                        0x7c, 0xc2, 0x54, 0xf8, 0x1b, 0xe8, 0xe7, 0x8d, 0x76, 0x5a, 0x2e, 0x63, 0x33, 0x9f, 0xc9, 0x9a,
                                                                        0x66, 0x32, 0x0d, 0xb7, 0x31, 0x58, 0xa3, 0x5a, 0x25, 0x5d, 0x05, 0x17, 0x58, 0xe9, 0x5e, 0xd4,
                                                                        0xab, 0xb2, 0xcd, 0xc6, 0x9b, 0xb4, 0x54, 0x11, 0x0e, 0x82, 0x74, 0x41, 0x21, 0x3d, 0xdc, 0x87,
                                                                        0x70, 0xe9, 0xc6, 0x34, 0xfa, 0xeb, 0xee, 0x37, 0x41, 0x8e, 0x97, 0x05, 0xcc, 0xba, 0xaa, 0x01,
                                                                        0x88, 0x67, 0x8a, 0xfc, 0x20, 0x7a, 0x3c, 0x5e, 0x3c, 0x1d, 0xae, 0xd4, 0x53, 0xb6, 0x24, 0xc4,
                                                                        0x00, 0xed, 0xd3, 0xfd, 0xf9, 0xc5, 0xa4, 0xbb, 0x35, 0xd1, 0xc5, 0x12, 0x5b, 0xe9, 0xf7, 0xf2,
                                                                        0x41, 0xb9, 0x82, 0x61, 0xa5, 0xba, 0xf9, 0x81, 0x5e, 0xae, 0xb5, 0x20, 0x00, 0x00, 0x00, 0x00 };

    BUFFER::BUFFER_T<packet_size>                   input_12        = { 0x00, 0x00, 0x00, 0x00,
                                                                        0x00, 0x00, 0x00, 0x01,
                                                                        0x00, 0x00, 0x00, 0x00,
                                                                        0x00, 0x00, 0x00, 0x00,
                                                                        0x62, 0x4d, 0xce, 0xb2, 0xa5, 0xbb, 0x40, 0x8d, 0x3f, 0x46, 0xa3, 0xc9, 0x2f, 0xd4, 0x50, 0x80,
                                                                        0x30, 0x98, 0xdb, 0x61, 0x67, 0x3b, 0x10, 0x67, 0x6b, 0x36, 0x86, 0x63, 0xb9, 0xad, 0x86, 0x06,
                                                                        0xa0, 0x47, 0x98, 0x03, 0xb2, 0xf9, 0x81, 0xe9, 0x67, 0x22, 0x22, 0x14, 0x2e, 0xb6, 0xb4, 0xe6,
                                                                        0xd6, 0xc1, 0xd1, 0x58, 0x01, 0xa1, 0xe0, 0xab, 0x9c, 0xc9, 0x95, 0x50, 0x72, 0x9e, 0xda, 0x7f,
                                                                        0xe0, 0xd2, 0xa0, 0x8c, 0xe2, 0xa9, 0x34, 0x3a, 0xc7, 0x28, 0xf4, 0xb2, 0xb2, 0x19, 0xce, 0xc0,
                                                                        0xa1, 0xad, 0x08, 0xe3, 0x07, 0x28, 0x56, 0x68, 0x90, 0x2c, 0xbf, 0x46, 0x93, 0x13, 0x10, 0xd2,
                                                                        0x60, 0x70, 0x32, 0x82, 0x58, 0x02, 0x84, 0x07, 0x2a, 0xb0, 0xca, 0x5c, 0x00, 0x00, 0x00, 0x00 };

    constexpr uint8_t                               exp_frame_2[]   = { 0x5c, 0x4c, 0xb0, 0x25, 0x4f, 0x67, 0x2b, 0x1b, 0xb0, 0x7e,
                                                                        0xff, 0xe3, 0xc3, 0x64, 0x6b, 0x7b, 0x02, 0x37, 0xe7, 0x35,
                                                                        0x8b, 0x23, 0xcb, 0x3b, 0x69, 0x2c, 0x78, 0x20, 0x42, 0x57,
                                                                        0x2c, 0x3c, 0x5b, 0x6e, 0x49, 0xe5, 0xb7, 0xc5, 0xfd, 0x7d,
                                                                        0x12, 0xfa, 0x9c, 0x75, 0xa7, 0x4f, 0xe8, 0x5d, 0x7e, 0x58,
                                                                        0xde, 0xcd, 0x01, 0xa1, 0xe0, 0xab, 0xa0, 0x9d, 0x55, 0xe3,
                                                                        0xe8, 0x3c, 0xd9, 0x5c, 0x45, 0x9a, 0x3e, 0x75, 0x06, 0x7d,
                                                                        0xf4, 0xf4, 0xaf, 0xe1, 0x29, 0x49, 0xb4, 0x05, 0xb4, 0xdc,
                                                                        0x78, 0xa9, 0x08, 0x4d, 0x0e, 0x01, 0x59, 0xaf, 0x11, 0x51,
                                                                        0xa6, 0x5a, 0x71, 0x0f, 0x4d, 0x8f, 0xa5, 0x4b, 0x71, 0x5b, };

    BUFFER::BUFFER_T<packet_size>                   input_21        = { 0x00, 0x00, 0x00, 0x00,
                                                                        0x00, 0x00, 0x00, 0x02,
                                                                        0x00, 0x00, 0x00, 0x00,
                                                                        0x00, 0x00, 0x00, 0x00,
                                                                        0x60, 0x18, 0x70, 0x96, 0xd5, 0xc5, 0x28, 0x38, 0x15, 0x36, 0x61, 0x1a, 0x27, 0xb0, 0xab, 0xb5,
                                                                        0x6a, 0xfe, 0x3a, 0xce, 0x8d, 0x3f, 0xb1, 0x27, 0xb0, 0x28, 0x78, 0x8e, 0x4b, 0x7e, 0x23, 0xfb,
                                                                        0xda, 0x13, 0x50, 0xf9, 0x55, 0xd9, 0xa0, 0x20, 0xd7, 0xc1, 0xdf, 0xac, 0x53, 0x30, 0xc0, 0xf8,
                                                                        0xa9, 0xbd, 0x3e, 0xa1, 0x41, 0xe1, 0xfc, 0x67, 0x3e, 0x01, 0x7e, 0x97, 0xea, 0xdc, 0x6b, 0x96,
                                                                        0x8f, 0x38, 0x5c, 0x2a, 0xec, 0xb0, 0x3b, 0xfb, 0x32, 0xaf, 0x3c, 0x54, 0xec, 0x18, 0xdb, 0x5c,
                                                                        0x02, 0x1a, 0xfe, 0x43, 0xfb, 0xfa, 0xaa, 0x3a, 0xfb, 0x29, 0xd1, 0xe6, 0x05, 0x3c, 0x7c, 0x94,
                                                                        0x75, 0xd8, 0xbe, 0x61, 0x89, 0xf9, 0x5c, 0xbb, 0xa8, 0x99, 0x0f, 0x95, 0x00, 0x00, 0x00, 0x00 };

    BUFFER::BUFFER_T<packet_size>                   input_22        = { 0x00, 0x00, 0x00, 0x00,
                                                                        0x00, 0x00, 0x00, 0x02,
                                                                        0x00, 0x00, 0x00, 0x00,
                                                                        0x00, 0x00, 0x00, 0x00,
                                                                        0x62, 0x4d, 0xce, 0xb2, 0xa5, 0xbb, 0x40, 0x8d, 0x3f, 0x46, 0xa3, 0xc9, 0x2f, 0xd4, 0x50, 0x80,
                                                                        0x30, 0x98, 0xdb, 0x61, 0x67, 0x3b, 0x10, 0x67, 0x6b, 0x36, 0x86, 0x63, 0xb9, 0xad, 0x86, 0x06,
                                                                        0xa0, 0x47, 0x98, 0x03, 0xb2, 0xf9, 0x81, 0xe9, 0x67, 0x22, 0x22, 0x14, 0x2e, 0xb6, 0xb4, 0xe6,
                                                                        0xd6, 0xc1, 0xd1, 0x58, 0x01, 0xa1, 0xe0, 0xab, 0x9c, 0xc9, 0x95, 0x50, 0x72, 0x9e, 0xda, 0x7f,
                                                                        0xe0, 0xd2, 0xa0, 0x8c, 0xe2, 0xa9, 0x34, 0x3a, 0xc7, 0x28, 0xf4, 0xb2, 0xb2, 0x19, 0xce, 0xc0,
                                                                        0xa1, 0xad, 0x08, 0xe3, 0x07, 0x28, 0x56, 0x68, 0x90, 0x2c, 0xbf, 0x46, 0x93, 0x13, 0x10, 0xd2,
                                                                        0x60, 0x70, 0x32, 0x82, 0x58, 0x02, 0x84, 0x07, 0x2a, 0xb0, 0xca, 0x5c, 0x00, 0x00, 0x00, 0x00 };

    bool                                            ret_val         = true;
    uint32_t                                        frame_units     = 2u;
    uint8_t                                         actual_frame    [width * height]{};
    MULTIPATH::MpFrames<packet_size, width, height> frames;

    frames.initialize(frame_units);

    if (frames.set(input_21, MULTIPATH::TYPE_SINGLE::TYPE_1))
    {
        fprintf(stderr, "%s:%d:%s: Incorrectly succeeded setting frame\n", __FILE__, __LINE__, __FUNCTION__);
        ret_val = false;
        goto terminate;
    }

    if (frames.set(input_22, MULTIPATH::TYPE_SINGLE::TYPE_2))
    {
        fprintf(stderr, "%s:%d:%s: Incorrectly succeeded setting frame\n", __FILE__, __LINE__, __FUNCTION__);
        ret_val = false;
        goto terminate;
    }

    if (!frames.set(input_00, MULTIPATH::TYPE_SINGLE::TYPE_0))
    {
        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        ret_val = false;
        goto terminate;
    }

    if (!frames.set(input_01, MULTIPATH::TYPE_SINGLE::TYPE_1))
    {
        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        ret_val = false;
        goto terminate;
    }

    if (!frames.set(input_10, MULTIPATH::TYPE_SINGLE::TYPE_0))
    {
        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        ret_val = false;
        goto terminate;
    }

    if (!frames.set(input_12, MULTIPATH::TYPE_SINGLE::TYPE_2))
    {
        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        ret_val = false;
        goto terminate;
    }

    if (frames.get(actual_frame, 2u))
    {
        fprintf(stderr, "%s:%d:%s: Incorrectly succeeded getting frame\n", __FILE__, __LINE__, __FUNCTION__);
        ret_val = false;
        goto terminate;
    }

    if (!frames.get(actual_frame, 0u))
    {
        fprintf(stderr, "%s:%d:%s: Failed getting frame\n", __FILE__, __LINE__, __FUNCTION__);
        ret_val = false;
        goto terminate;
    }

    if (memcmp(actual_frame, exp_frame_0, sizeof(exp_frame_0)))
    {
        fprintf(stderr, "%s:%d:%s: Incorrect frame\n", __FILE__, __LINE__, __FUNCTION__);
        ret_val = false;
        goto terminate;
    }

    if (!frames.get(actual_frame, 1u))
    {
        fprintf(stderr, "%s:%d:%s: Failed getting frame\n", __FILE__, __LINE__, __FUNCTION__);
        ret_val = false;
        goto terminate;
    }

    if (memcmp(actual_frame, exp_frame_1, sizeof(exp_frame_1)))
    {
        fprintf(stderr, "%s:%d:%s: Incorrect frame\n", __FILE__, __LINE__, __FUNCTION__);
        ret_val = false;
        goto terminate;
    }

    if (!frames.set(input_21, MULTIPATH::TYPE_SINGLE::TYPE_1))
    {
        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        ret_val = false;
        goto terminate;
    }

    if (!frames.set(input_22, MULTIPATH::TYPE_SINGLE::TYPE_2))
    {
        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        ret_val = false;
        goto terminate;
    }

    if (!frames.get(actual_frame, 2u))
    {
        fprintf(stderr, "%s:%d:%s: Failed getting frame\n", __FILE__, __LINE__, __FUNCTION__);
        ret_val = false;
        goto terminate;
    }

    if (memcmp(actual_frame, exp_frame_2, sizeof(exp_frame_2)))
    {
        fprintf(stderr, "%s:%d:%s: Incorrect frame\n", __FILE__, __LINE__, __FUNCTION__);
        ret_val = false;
        goto terminate;
    }

terminate:
    frames.deinitialize();

    return ret_val;
}


int main(int argc, char** argv)
{
    if (!test_frames())
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    return 0;
}
