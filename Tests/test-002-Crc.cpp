
#include <stdio.h>
#include <string.h>

#include "Base/Crc.h"


namespace
{
    constexpr uint32_t packet_size = 128u;
}


bool test_calculation(BUFFER::BUFFER_T<packet_size>& BufferInput, BUFFER::BUFFER_T<packet_size>& BufferExpected, uint32_t CrcPolynomial)
{
    BUFFER::BUFFER_T<packet_size> buffer{};

    memcpy(&buffer, &BufferInput, sizeof(buffer));

    Crc::calculate(buffer, CrcPolynomial);

    if (memcmp(&buffer, &BufferExpected, sizeof(buffer)))
    {
        fprintf(stderr, "%s:%d:%s: Incorrect CRC\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    return true;
}


bool test_verification(BUFFER::BUFFER_T<packet_size>& BufferInput, uint32_t CrcPolynomial)
{
    BUFFER::BUFFER_T<packet_size> buffer{};

    memcpy(&buffer, &BufferInput, sizeof(buffer));

    if (!Crc::verify(buffer, CrcPolynomial))
    {
        fprintf(stderr, "%s:%d:%s: Invalid CRC\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    return true;
}


int main(int argc, char** argv)
{
    /*
        Expected CRCs generated using http://www.sunshine2k.de/coding/javascript/crc/crc_js.html
    */

    BUFFER::BUFFER_T<packet_size> input     = { 0x5f, 0xd9, 0x2f, 0x6f, 0x53, 0x85, 0x3c, 0x01, 0x0b, 0xb2, 0x12, 0x4a, 0x21, 0xaf, 0x89, 0xe0,
                                                0xc2, 0x58, 0x80, 0xae, 0xfc, 0x10, 0x26, 0x36, 0x2a, 0x14, 0x2e, 0x42, 0x9e, 0x80, 0xaf, 0x20,
                                                0x8f, 0xc4, 0x61, 0x59, 0xdd, 0x05, 0xaf, 0x88, 0xda, 0x98, 0xf7, 0x27, 0x60, 0x00, 0x4b, 0x30,
                                                0xcd, 0x07, 0xf3, 0x07, 0x5c, 0x59, 0x9d, 0x4c, 0xdf, 0x12, 0x53, 0xd1, 0x00, 0x00, 0x00, 0x00,
                                                0x5f, 0xd9, 0x2f, 0x6f, 0x53, 0x85, 0x3c, 0x01, 0x0b, 0xb2, 0x12, 0x4a, 0x21, 0xaf, 0x89, 0xe0,
                                                0xc2, 0x58, 0x80, 0xae, 0xfc, 0x10, 0x26, 0x36, 0x2a, 0x14, 0x2e, 0x42, 0x9e, 0x80, 0xaf, 0x20,
                                                0x8f, 0xc4, 0x61, 0x59, 0xdd, 0x05, 0xaf, 0x88, 0xda, 0x98, 0xf7, 0x27, 0x60, 0x00, 0x4b, 0x30,
                                                0xcd, 0x07, 0xf3, 0x07, 0x5c, 0x59, 0x9d, 0x4c, 0xdf, 0x12, 0x53, 0xd1, 0x00, 0x00, 0x00, 0x00 };

    BUFFER::BUFFER_T<packet_size> output_a  = { 0x5f, 0xd9, 0x2f, 0x6f, 0x53, 0x85, 0x3c, 0x01, 0x0b, 0xb2, 0x12, 0x4a, 0x21, 0xaf, 0x89, 0xe0,
                                                0xc2, 0x58, 0x80, 0xae, 0xfc, 0x10, 0x26, 0x36, 0x2a, 0x14, 0x2e, 0x42, 0x9e, 0x80, 0xaf, 0x20,
                                                0x8f, 0xc4, 0x61, 0x59, 0xdd, 0x05, 0xaf, 0x88, 0xda, 0x98, 0xf7, 0x27, 0x60, 0x00, 0x4b, 0x30,
                                                0xcd, 0x07, 0xf3, 0x07, 0x5c, 0x59, 0x9d, 0x4c, 0xdf, 0x12, 0x53, 0xd1, 0x00, 0x00, 0x00, 0x00,
                                                0x5f, 0xd9, 0x2f, 0x6f, 0x53, 0x85, 0x3c, 0x01, 0x0b, 0xb2, 0x12, 0x4a, 0x21, 0xaf, 0x89, 0xe0,
                                                0xc2, 0x58, 0x80, 0xae, 0xfc, 0x10, 0x26, 0x36, 0x2a, 0x14, 0x2e, 0x42, 0x9e, 0x80, 0xaf, 0x20,
                                                0x8f, 0xc4, 0x61, 0x59, 0xdd, 0x05, 0xaf, 0x88, 0xda, 0x98, 0xf7, 0x27, 0x60, 0x00, 0x4b, 0x30,
                                                0xcd, 0x07, 0xf3, 0x07, 0x5c, 0x59, 0x9d, 0x4c, 0xdf, 0x12, 0x53, 0xd1, 0x8d, 0x9a, 0xc6, 0xaf };

    BUFFER::BUFFER_T<packet_size> output_b  = { 0x5f, 0xd9, 0x2f, 0x6f, 0x53, 0x85, 0x3c, 0x01, 0x0b, 0xb2, 0x12, 0x4a, 0x21, 0xaf, 0x89, 0xe0,
                                                0xc2, 0x58, 0x80, 0xae, 0xfc, 0x10, 0x26, 0x36, 0x2a, 0x14, 0x2e, 0x42, 0x9e, 0x80, 0xaf, 0x20,
                                                0x8f, 0xc4, 0x61, 0x59, 0xdd, 0x05, 0xaf, 0x88, 0xda, 0x98, 0xf7, 0x27, 0x60, 0x00, 0x4b, 0x30,
                                                0xcd, 0x07, 0xf3, 0x07, 0x5c, 0x59, 0x9d, 0x4c, 0xdf, 0x12, 0x53, 0xd1, 0x00, 0x00, 0x00, 0x00,
                                                0x5f, 0xd9, 0x2f, 0x6f, 0x53, 0x85, 0x3c, 0x01, 0x0b, 0xb2, 0x12, 0x4a, 0x21, 0xaf, 0x89, 0xe0,
                                                0xc2, 0x58, 0x80, 0xae, 0xfc, 0x10, 0x26, 0x36, 0x2a, 0x14, 0x2e, 0x42, 0x9e, 0x80, 0xaf, 0x20,
                                                0x8f, 0xc4, 0x61, 0x59, 0xdd, 0x05, 0xaf, 0x88, 0xda, 0x98, 0xf7, 0x27, 0x60, 0x00, 0x4b, 0x30,
                                                0xcd, 0x07, 0xf3, 0x07, 0x5c, 0x59, 0x9d, 0x4c, 0xdf, 0x12, 0x53, 0xd1, 0x18, 0xfd, 0x52, 0x00 };

    BUFFER::BUFFER_T<packet_size> output_c  = { 0x5f, 0xd9, 0x2f, 0x6f, 0x53, 0x85, 0x3c, 0x01, 0x0b, 0xb2, 0x12, 0x4a, 0x21, 0xaf, 0x89, 0xe0,
                                                0xc2, 0x58, 0x80, 0xae, 0xfc, 0x10, 0x26, 0x36, 0x2a, 0x14, 0x2e, 0x42, 0x9e, 0x80, 0xaf, 0x20,
                                                0x8f, 0xc4, 0x61, 0x59, 0xdd, 0x05, 0xaf, 0x88, 0xda, 0x98, 0xf7, 0x27, 0x60, 0x00, 0x4b, 0x30,
                                                0xcd, 0x07, 0xf3, 0x07, 0x5c, 0x59, 0x9d, 0x4c, 0xdf, 0x12, 0x53, 0xd1, 0x00, 0x00, 0x00, 0x00,
                                                0x5f, 0xd9, 0x2f, 0x6f, 0x53, 0x85, 0x3c, 0x01, 0x0b, 0xb2, 0x12, 0x4a, 0x21, 0xaf, 0x89, 0xe0,
                                                0xc2, 0x58, 0x80, 0xae, 0xfc, 0x10, 0x26, 0x36, 0x2a, 0x14, 0x2e, 0x42, 0x9e, 0x80, 0xaf, 0x20,
                                                0x8f, 0xc4, 0x61, 0x59, 0xdd, 0x05, 0xaf, 0x88, 0xda, 0x98, 0xf7, 0x27, 0x60, 0x00, 0x4b, 0x30,
                                                0xcd, 0x07, 0xf3, 0x07, 0x5c, 0x59, 0x9d, 0x4c, 0xdf, 0x12, 0x53, 0xd1, 0xfa, 0x4b, 0xaf, 0x44 };

    BUFFER::BUFFER_T<packet_size> output_d  = { 0x5f, 0xd9, 0x2f, 0x6f, 0x53, 0x85, 0x3c, 0x01, 0x0b, 0xb2, 0x12, 0x4a, 0x21, 0xaf, 0x89, 0xe0,
                                                0xc2, 0x58, 0x80, 0xae, 0xfc, 0x10, 0x26, 0x36, 0x2a, 0x14, 0x2e, 0x42, 0x9e, 0x80, 0xaf, 0x20,
                                                0x8f, 0xc4, 0x61, 0x59, 0xdd, 0x05, 0xaf, 0x88, 0xda, 0x98, 0xf7, 0x27, 0x60, 0x00, 0x4b, 0x30,
                                                0xcd, 0x07, 0xf3, 0x07, 0x5c, 0x59, 0x9d, 0x4c, 0xdf, 0x12, 0x53, 0xd1, 0x00, 0x00, 0x00, 0x00,
                                                0x5f, 0xd9, 0x2f, 0x6f, 0x53, 0x85, 0x3c, 0x01, 0x0b, 0xb2, 0x12, 0x4a, 0x21, 0xaf, 0x89, 0xe0,
                                                0xc2, 0x58, 0x80, 0xae, 0xfc, 0x10, 0x26, 0x36, 0x2a, 0x14, 0x2e, 0x42, 0x9e, 0x80, 0xaf, 0x20,
                                                0x8f, 0xc4, 0x61, 0x59, 0xdd, 0x05, 0xaf, 0x88, 0xda, 0x98, 0xf7, 0x27, 0x60, 0x00, 0x4b, 0x30,
                                                0xcd, 0x07, 0xf3, 0x07, 0x5c, 0x59, 0x9d, 0x4c, 0xdf, 0x12, 0x53, 0xd1, 0xe1, 0x34, 0x11, 0x57 };

    BUFFER::BUFFER_T<packet_size> output_e  = { 0x5f, 0xd9, 0x2f, 0x6f, 0x53, 0x85, 0x3c, 0x01, 0x0b, 0xb2, 0x12, 0x4a, 0x21, 0xaf, 0x89, 0xe0,
                                                0xc2, 0x58, 0x80, 0xae, 0xfc, 0x10, 0x26, 0x36, 0x2a, 0x14, 0x2e, 0x42, 0x9e, 0x80, 0xaf, 0x20,
                                                0x8f, 0xc4, 0x61, 0x59, 0xdd, 0x05, 0xaf, 0x88, 0xda, 0x98, 0xf7, 0x27, 0x60, 0x00, 0x4b, 0x30,
                                                0xcd, 0x07, 0xf3, 0x07, 0x5c, 0x59, 0x9d, 0x4c, 0xdf, 0x12, 0x53, 0xd1, 0x00, 0x00, 0x00, 0x00,
                                                0x5f, 0xd9, 0x2f, 0x6f, 0x53, 0x85, 0x3c, 0x01, 0x0b, 0xb2, 0x12, 0x4a, 0x21, 0xaf, 0x89, 0xe0,
                                                0xc2, 0x58, 0x80, 0xae, 0xfc, 0x10, 0x26, 0x36, 0x2a, 0x14, 0x2e, 0x42, 0x9e, 0x80, 0xaf, 0x20,
                                                0x8f, 0xc4, 0x61, 0x59, 0xdd, 0x05, 0xaf, 0x88, 0xda, 0x98, 0xf7, 0x27, 0x60, 0x00, 0x4b, 0x30,
                                                0xcd, 0x07, 0xf3, 0x07, 0x5c, 0x59, 0x9d, 0x4c, 0xdf, 0x12, 0x53, 0xd1, 0xc2, 0x4c, 0x54, 0x08 };

    if (!test_calculation(input, output_a, 0x04C11DB7))
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    if (!test_calculation(input, output_b, 0x00011021))
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    if (!test_calculation(input, output_c, 0x01864cfb))
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    if (!test_calculation(input, output_d, 0x01800063))
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    if (!test_calculation(input, output_e, 0x01b2b117))
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    if (!test_verification(output_a, 0x04C11DB7))
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    if (!test_verification(output_b, 0x00011021))
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    if (!test_verification(output_c, 0x01864cfb))
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    if (!test_verification(output_d, 0x01800063))
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    if (!test_verification(output_e, 0x01b2b117))
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    return 0;
}
