
#include <stdio.h>
#include <string>

#include "Base/Buffer.h"
#include "Base/Endianness.h"
#include "Multipath/MpFrame.h"


bool test_setting_single_frame_forward()
{
    constexpr uint32_t                  packet_size         = 128u;
    constexpr uint32_t                  width               = 16u;
    constexpr uint32_t                  height              = 16u;

    BUFFER::BUFFER_T<packet_size>       input_0             = { 0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0xf2, 0xfb, 0xe3, 0x46, 0x7c, 0xc2, 0x54, 0xf8, 0x1b, 0xe8, 0xe7, 0x8d, 0x76, 0x5a, 0x2e, 0x63,
                                                                0x33, 0x9f, 0xc9, 0x9a, 0x66, 0x32, 0x0d, 0xb7, 0x31, 0x58, 0xa3, 0x5a, 0x25, 0x5d, 0x05, 0x17,
                                                                0x58, 0xe9, 0x5e, 0xd4, 0xab, 0xb2, 0xcd, 0xc6, 0x9b, 0xb4, 0x54, 0x11, 0x0e, 0x82, 0x74, 0x41,
                                                                0x21, 0x3d, 0xdc, 0x87, 0x70, 0xe9, 0xc6, 0x34, 0xfa, 0xeb, 0xee, 0x37, 0x41, 0x8e, 0x97, 0x05,
                                                                0xcc, 0xba, 0xaa, 0x01, 0x88, 0x67, 0x8a, 0xfc, 0x20, 0x7a, 0x3c, 0x5e, 0x3c, 0x1d, 0xae, 0xd4,
                                                                0x53, 0xb6, 0x24, 0xc4, 0x00, 0xed, 0xd3, 0xfd, 0xf9, 0xc5, 0xa4, 0xbb, 0x35, 0xd1, 0xc5, 0x12,
                                                                0x5b, 0xe9, 0xf7, 0xf2, 0x41, 0xb9, 0x82, 0x61, 0xa5, 0xba, 0xf9, 0x81, 0x5e, 0xae, 0xb5, 0x20, };

    BUFFER::BUFFER_T<packet_size>       input_1             = { 0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0xf6, 0x65, 0xf9, 0xa2, 0x60, 0x18, 0x70, 0x96, 0xd5, 0xc5, 0x28, 0x38, 0x15, 0x36, 0x61, 0x1a,
                                                                0x27, 0xb0, 0xab, 0xb5, 0x6a, 0xfe, 0x3a, 0xce, 0x8d, 0x3f, 0xb1, 0x27, 0xb0, 0x28, 0x78, 0x8e,
                                                                0x4b, 0x7e, 0x23, 0xfb, 0xda, 0x13, 0x50, 0xf9, 0x55, 0xd9, 0xa0, 0x20, 0xd7, 0xc1, 0xdf, 0xac,
                                                                0x53, 0x30, 0xc0, 0xf8, 0xa9, 0xbd, 0x3e, 0xa1, 0x41, 0xe1, 0xfc, 0x67, 0x3e, 0x01, 0x7e, 0x97,
                                                                0xea, 0xdc, 0x6b, 0x96, 0x8f, 0x38, 0x5c, 0x2a, 0xec, 0xb0, 0x3b, 0xfb, 0x32, 0xaf, 0x3c, 0x54,
                                                                0xec, 0x18, 0xdb, 0x5c, 0x02, 0x1a, 0xfe, 0x43, 0xfb, 0xfa, 0xaa, 0x3a, 0xfb, 0x29, 0xd1, 0xe6,
                                                                0x05, 0x3c, 0x7c, 0x94, 0x75, 0xd8, 0xbe, 0x61, 0x89, 0xf9, 0x5c, 0xbb, 0xa8, 0x99, 0x0f, 0x95, };

    BUFFER::BUFFER_T<packet_size>       input_2             = { 0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0xf8, 0xf9, 0x24, 0xe5, 0x62, 0x4d, 0xce, 0xb2, 0xa5, 0xbb, 0x40, 0x8d, 0x3f, 0x46, 0xa3, 0xc9,
                                                                0x2f, 0xd4, 0x50, 0x80, 0x30, 0x98, 0xdb, 0x61, 0x67, 0x3b, 0x10, 0x67, 0x6b, 0x36, 0x86, 0x63,
                                                                0xb9, 0xad, 0x86, 0x06, 0xa0, 0x47, 0x98, 0x03, 0xb2, 0xf9, 0x81, 0xe9, 0x67, 0x22, 0x22, 0x14,
                                                                0x2e, 0xb6, 0xb4, 0xe6, 0xd6, 0xc1, 0xd1, 0x58, 0x01, 0xa1, 0xe0, 0xab, 0x9c, 0xc9, 0x95, 0x50,
                                                                0x72, 0x9e, 0xda, 0x7f, 0xe0, 0xd2, 0xa0, 0x8c, 0xe2, 0xa9, 0x34, 0x3a, 0xc7, 0x28, 0xf4, 0xb2,
                                                                0xb2, 0x19, 0xce, 0xc0, 0xa1, 0xad, 0x08, 0xe3, 0x07, 0x28, 0x56, 0x68, 0x90, 0x2c, 0xbf, 0x46,
                                                                0x93, 0x13, 0x10, 0xd2, 0x60, 0x70, 0x32, 0x82, 0x58, 0x02, 0x84, 0x07, 0x2a, 0xb0, 0xca, 0x5c, };

    uint8_t                             expected_frame[]    = { 0x04, 0x9e, 0x1a, 0xe4, 0x1c, 0xda, 0x24, 0x6e, 0xce, 0x2d, 0xcf, 0xb5, 0x63, 0x6c, 0x4f, 0x79,
                                                                0x14, 0x2f, 0x62, 0x2f, 0x0c, 0xcc, 0x37, 0x79, 0xbc, 0x67, 0x12, 0x7d, 0x95, 0x75, 0x7d, 0x99,
                                                                0x13, 0x97, 0x7d, 0x2f, 0x71, 0xa1, 0x9d, 0x3f, 0xce, 0x6d, 0xf4, 0x31, 0xd9, 0x43, 0xab, 0xed,
                                                                0x72, 0x0d, 0x1c, 0x7f, 0xd9, 0x54, 0xf8, 0x95, 0xbb, 0x0a, 0x12, 0x50, 0x7f, 0x8f, 0xe9, 0x92,
                                                                0x26, 0x66, 0xc1, 0x97, 0x07, 0x5f, 0xd6, 0xd6, 0xcc, 0xca, 0x07, 0xa5, 0x0e, 0xb2, 0x92, 0x80,
                                                                0xbf, 0xae, 0xff, 0x98, 0x02, 0xf7, 0x2d, 0xbe, 0x02, 0x3f, 0x0e, 0x81, 0xce, 0xf8, 0x14, 0xf4,
                                                                0x5e, 0xd5, 0x8b, 0x66, 0x34, 0x61, 0x3c, 0x00, 0x2c, 0x43, 0xa5, 0x3a, 0xf6, 0x37, 0xba, 0xb5,
                                                                0xf1, 0x48, 0xc9, 0x3f, 0xc3, 0xc8, 0x98, 0x1f, 0x00, 0x77, 0xd7, 0x7e, 0x21, 0xa9, 0xa7, 0xda,
                                                                0xde, 0x98, 0x91, 0x7e, 0xad, 0x9f, 0x8c, 0xb0, 0xb7, 0xcc, 0x59, 0x39, 0xef, 0x2b, 0x58, 0x6a,
                                                                0x1f, 0xa9, 0x2a, 0x01, 0xae, 0x08, 0x2f, 0x91, 0xe1, 0xb7, 0x32, 0xd8, 0x48, 0x69, 0xe6, 0xb6,
                                                                0xf2, 0x33, 0x15, 0xe7, 0xd2, 0x36, 0x68, 0x10, 0xf3, 0x5a, 0x03, 0xed, 0xe0, 0x0b, 0xc1, 0xa8,
                                                                0x69, 0x76, 0x3d, 0xf2, 0x96, 0x88, 0x8e, 0xef, 0xd1, 0x36, 0xfd, 0xa0, 0xa1, 0x1a, 0xf9, 0x05,
                                                                0x83, 0x41, 0x6d, 0x9a, 0x84, 0xf0, 0x0d, 0xf4, 0x5f, 0xc1, 0x08, 0xbc, 0x3b, 0x9e, 0x72, 0x80,
                                                                0x08, 0xa7, 0x44, 0xc3, 0x6e, 0xf2, 0x46, 0xc3, 0x79, 0x3f, 0x58, 0x80, 0x5a, 0x59, 0x0c, 0x68,
                                                                0xb9, 0x18, 0xd8, 0x82, 0x5c, 0x4c, 0xb0, 0x25, 0x4f, 0x67, 0x2b, 0x1b, 0xb0, 0x7e, 0xff, 0xe3,
                                                                0xc3, 0x64, 0x6b, 0x7b, 0x02, 0x37, 0xe7, 0x35, 0x8b, 0x23, 0xcb, 0x3b, 0x69, 0x2c, 0x78, 0x20 };

    uint8_t                            actual_frame[width * height]{};
    MULTIPATH::MpFrame<packet_size,
                       width,
                       height>          frame;

    Endianness::hton32(input_0.Offset, 0u);
    Endianness::hton32(input_1.Offset, 0u);

    if (!frame.set(input_0, MULTIPATH::TYPE_SINGLE::TYPE_0))
    {
        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    if (!frame.set(input_1, MULTIPATH::TYPE_SINGLE::TYPE_1))
    {

        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    Endianness::hton32(input_0.Offset, sizeof(BUFFER::BUFFER_T<packet_size>::Data));
    Endianness::hton32(input_2.Offset, sizeof(BUFFER::BUFFER_T<packet_size>::Data));

    if (!frame.set(input_0, MULTIPATH::TYPE_SINGLE::TYPE_0))
    {
        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    if (!frame.set(input_2, MULTIPATH::TYPE_SINGLE::TYPE_2))
    {

        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    Endianness::hton32(input_1.Offset, 2u * sizeof(BUFFER::BUFFER_T<packet_size>::Data));
    Endianness::hton32(input_2.Offset, 2u * sizeof(BUFFER::BUFFER_T<packet_size>::Data));

    if (!frame.set(input_1, MULTIPATH::TYPE_SINGLE::TYPE_1))
    {
        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    if (!frame.set(input_2, MULTIPATH::TYPE_SINGLE::TYPE_2))
    {

        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    if (!frame.get(actual_frame, 0u))
    {
        fprintf(stderr, "%s:%d:%s: Failed to get\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    if (memcmp(actual_frame, expected_frame, sizeof(expected_frame)))
    {
        fprintf(stderr, "%s:%d:%s: Incorrect frame\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    return true;
}


bool test_setting_single_frame_backward()
{
    constexpr uint32_t                  packet_size         = 128u;
    constexpr uint32_t                  width               = 16u;
    constexpr uint32_t                  height              = 16u;

    BUFFER::BUFFER_T<packet_size>       input_0             = { 0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x29, 0xcd, 0xba, 0xab, 0xf2, 0xfb, 0xe3, 0x46, 0x7c, 0xc2, 0x54, 0xf8, 0x1b, 0xe8, 0xe7, 0x8d,
                                                                0x76, 0x5a, 0x2e, 0x63, 0x33, 0x9f, 0xc9, 0x9a, 0x66, 0x32, 0x0d, 0xb7, 0x31, 0x58, 0xa3, 0x5a,
                                                                0x25, 0x5d, 0x05, 0x17, 0x58, 0xe9, 0x5e, 0xd4, 0xab, 0xb2, 0xcd, 0xc6, 0x9b, 0xb4, 0x54, 0x11,
                                                                0x0e, 0x82, 0x74, 0x41, 0x21, 0x3d, 0xdc, 0x87, 0x70, 0xe9, 0xc6, 0x34, 0xfa, 0xeb, 0xee, 0x37,
                                                                0x41, 0x8e, 0x97, 0x05, 0xcc, 0xba, 0xaa, 0x01, 0x88, 0x67, 0x8a, 0xfc, 0x20, 0x7a, 0x3c, 0x5e,
                                                                0x3c, 0x1d, 0xae, 0xd4, 0x53, 0xb6, 0x24, 0xc4, 0x00, 0xed, 0xd3, 0xfd, 0xf9, 0xc5, 0xa4, 0xbb,
                                                                0x35, 0xd1, 0xc5, 0x12, 0x5b, 0xe9, 0xf7, 0xf2, 0x41, 0xb9, 0x82, 0x61, 0xa5, 0xba, 0xf9, 0x81, };

    BUFFER::BUFFER_T<packet_size>       input_1             = { 0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0xe8, 0xe0, 0xd8, 0xab, 0xf6, 0x65, 0xf9, 0xa2, 0x60, 0x18, 0x70, 0x96, 0xd5, 0xc5, 0x28, 0x38,
                                                                0x15, 0x36, 0x61, 0x1a, 0x27, 0xb0, 0xab, 0xb5, 0x6a, 0xfe, 0x3a, 0xce, 0x8d, 0x3f, 0xb1, 0x27,
                                                                0xb0, 0x28, 0x78, 0x8e, 0x4b, 0x7e, 0x23, 0xfb, 0xda, 0x13, 0x50, 0xf9, 0x55, 0xd9, 0xa0, 0x20,
                                                                0xd7, 0xc1, 0xdf, 0xac, 0x53, 0x30, 0xc0, 0xf8, 0xa9, 0xbd, 0x3e, 0xa1, 0x41, 0xe1, 0xfc, 0x67,
                                                                0x3e, 0x01, 0x7e, 0x97, 0xea, 0xdc, 0x6b, 0x96, 0x8f, 0x38, 0x5c, 0x2a, 0xec, 0xb0, 0x3b, 0xfb,
                                                                0x32, 0xaf, 0x3c, 0x54, 0xec, 0x18, 0xdb, 0x5c, 0x02, 0x1a, 0xfe, 0x43, 0xfb, 0xfa, 0xaa, 0x3a,
                                                                0xfb, 0x29, 0xd1, 0xe6, 0x05, 0x3c, 0x7c, 0x94, 0x75, 0xd8, 0xbe, 0x61, 0x89, 0xf9, 0x5c, 0xbb, };

    BUFFER::BUFFER_T<packet_size>       input_2             = { 0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0xff, 0x8c, 0x23, 0xe1, 0xf8, 0xf9, 0x24, 0xe5, 0x62, 0x4d, 0xce, 0xb2, 0xa5, 0xbb, 0x40, 0x8d,
                                                                0x3f, 0x46, 0xa3, 0xc9, 0x2f, 0xd4, 0x50, 0x80, 0x30, 0x98, 0xdb, 0x61, 0x67, 0x3b, 0x10, 0x67,
                                                                0x6b, 0x36, 0x86, 0x63, 0xb9, 0xad, 0x86, 0x06, 0xa0, 0x47, 0x98, 0x03, 0xb2, 0xf9, 0x81, 0xe9,
                                                                0x67, 0x22, 0x22, 0x14, 0x2e, 0xb6, 0xb4, 0xe6, 0xd6, 0xc1, 0xd1, 0x58, 0x01, 0xa1, 0xe0, 0xab,
                                                                0x9c, 0xc9, 0x95, 0x50, 0x72, 0x9e, 0xda, 0x7f, 0xe0, 0xd2, 0xa0, 0x8c, 0xe2, 0xa9, 0x34, 0x3a,
                                                                0xc7, 0x28, 0xf4, 0xb2, 0xb2, 0x19, 0xce, 0xc0, 0xa1, 0xad, 0x08, 0xe3, 0x07, 0x28, 0x56, 0x68,
                                                                0x90, 0x2c, 0xbf, 0x46, 0x93, 0x13, 0x10, 0xd2, 0x60, 0x70, 0x32, 0x82, 0x58, 0x02, 0x84, 0x07, };

    uint8_t                             expected_frame[]    = { 0xc1, 0x2d, 0x62, 0x00, 0x04, 0x9e, 0x1a, 0xe4, 0x1c, 0xda, 0x24, 0x6e, 0xce, 0x2d, 0xcf, 0xb5,
                                                                0x63, 0x6c, 0x4f, 0x79, 0x14, 0x2f, 0x62, 0x2f, 0x0c, 0xcc, 0x37, 0x79, 0xbc, 0x67, 0x12, 0x7d,
                                                                0x95, 0x75, 0x7d, 0x99, 0x13, 0x97, 0x7d, 0x2f, 0x71, 0xa1, 0x9d, 0x3f, 0xce, 0x6d, 0xf4, 0x31,
                                                                0xd9, 0x43, 0xab, 0xed, 0x72, 0x0d, 0x1c, 0x7f, 0xd9, 0x54, 0xf8, 0x95, 0xbb, 0x0a, 0x12, 0x50,
                                                                0x7f, 0x8f, 0xe9, 0x92, 0x26, 0x66, 0xc1, 0x97, 0x07, 0x5f, 0xd6, 0xd6, 0xcc, 0xca, 0x07, 0xa5,
                                                                0x0e, 0xb2, 0x92, 0x80, 0xbf, 0xae, 0xff, 0x98, 0x02, 0xf7, 0x2d, 0xbe, 0x02, 0x3f, 0x0e, 0x81,
                                                                0xce, 0xf8, 0x14, 0xf4, 0x5e, 0xd5, 0x8b, 0x66, 0x34, 0x61, 0x3c, 0x00, 0x2c, 0x43, 0xa5, 0x3a,
                                                                0x70, 0x69, 0x8e, 0x26, 0xf1, 0x48, 0xc9, 0x3f, 0xc3, 0xc8, 0x98, 0x1f, 0x00, 0x77, 0xd7, 0x7e,
                                                                0x21, 0xa9, 0xa7, 0xda, 0xde, 0x98, 0x91, 0x7e, 0xad, 0x9f, 0x8c, 0xb0, 0xb7, 0xcc, 0x59, 0x39,
                                                                0xef, 0x2b, 0x58, 0x6a, 0x1f, 0xa9, 0x2a, 0x01, 0xae, 0x08, 0x2f, 0x91, 0xe1, 0xb7, 0x32, 0xd8,
                                                                0x48, 0x69, 0xe6, 0xb6, 0xf2, 0x33, 0x15, 0xe7, 0xff, 0x0c, 0x6b, 0xf3, 0xf3, 0x5a, 0x03, 0xed,
                                                                0xe0, 0x0b, 0xc1, 0xa8, 0x69, 0x76, 0x3d, 0xf2, 0x96, 0x88, 0x8e, 0xef, 0xd1, 0x36, 0xfd, 0xa0,
                                                                0xa1, 0x1a, 0xf9, 0x05, 0x83, 0x41, 0x6d, 0x9a, 0x84, 0xf0, 0x0d, 0xf4, 0x5f, 0xc1, 0x08, 0xbc,
                                                                0x3b, 0x9e, 0x72, 0x80, 0x08, 0xa7, 0x44, 0xc3, 0x6e, 0xf2, 0x46, 0xc3, 0x79, 0x3f, 0x58, 0x80,
                                                                0x56, 0x31, 0x1d, 0x40, 0xb9, 0x18, 0xd8, 0x82, 0x5c, 0x4c, 0xb0, 0x25, 0x4f, 0x67, 0x2b, 0x1b,
                                                                0xb0, 0x7e, 0xff, 0xe3, 0xc3, 0x64, 0x6b, 0x7b, 0x02, 0x37, 0xe7, 0x35, 0x8b, 0x23, 0xcb, 0x3b, };

    uint8_t                             actual_frame[width * height]{};
    MULTIPATH::MpFrame<packet_size,
                       width,
                       height>          frame;

    Endianness::hton32(input_0.Offset, 0u);
    Endianness::hton32(input_1.Offset, 0u);

    if (!frame.set(input_1, MULTIPATH::TYPE_SINGLE::TYPE_1))
    {

        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    if (!frame.set(input_0, MULTIPATH::TYPE_SINGLE::TYPE_0))
    {
        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    Endianness::hton32(input_0.Offset, sizeof(BUFFER::BUFFER_T<packet_size>::Data));
    Endianness::hton32(input_2.Offset, sizeof(BUFFER::BUFFER_T<packet_size>::Data));

    if (!frame.set(input_2, MULTIPATH::TYPE_SINGLE::TYPE_2))
    {

        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    if (!frame.set(input_0, MULTIPATH::TYPE_SINGLE::TYPE_0))
    {
        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    Endianness::hton32(input_1.Offset, 2u * sizeof(BUFFER::BUFFER_T<packet_size>::Data));
    Endianness::hton32(input_2.Offset, 2u * sizeof(BUFFER::BUFFER_T<packet_size>::Data));

    if (!frame.set(input_2, MULTIPATH::TYPE_SINGLE::TYPE_2))
    {

        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    if (!frame.set(input_1, MULTIPATH::TYPE_SINGLE::TYPE_1))
    {
        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    if (!frame.get(actual_frame, 0u))
    {
        fprintf(stderr, "%s:%d:%s: Failed to get\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    if (memcmp(actual_frame, expected_frame, sizeof(expected_frame)))
    {
        fprintf(stderr, "%s:%d:%s: Incorrect frame\n", __FILE__, __LINE__, __FUNCTION__);
        return false;
    }

    return true;
}


bool test_setting_frame_twice()
{
    constexpr uint32_t                  packet_size         = 128u;
    constexpr uint32_t                  width               = 16u;
    constexpr uint32_t                  height              = 16u;

    BUFFER::BUFFER_T<packet_size>       input_0a            = { 0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x29, 0xcd, 0xba, 0xab, 0xf2, 0xfb, 0xe3, 0x46, 0x7c, 0xc2, 0x54, 0xf8, 0x1b, 0xe8, 0xe7, 0x8d,
                                                                0x76, 0x5a, 0x2e, 0x63, 0x33, 0x9f, 0xc9, 0x9a, 0x66, 0x32, 0x0d, 0xb7, 0x31, 0x58, 0xa3, 0x5a,
                                                                0x25, 0x5d, 0x05, 0x17, 0x58, 0xe9, 0x5e, 0xd4, 0xab, 0xb2, 0xcd, 0xc6, 0x9b, 0xb4, 0x54, 0x11,
                                                                0x0e, 0x82, 0x74, 0x41, 0x21, 0x3d, 0xdc, 0x87, 0x70, 0xe9, 0xc6, 0x34, 0xfa, 0xeb, 0xee, 0x37,
                                                                0x41, 0x8e, 0x97, 0x05, 0xcc, 0xba, 0xaa, 0x01, 0x88, 0x67, 0x8a, 0xfc, 0x20, 0x7a, 0x3c, 0x5e,
                                                                0x3c, 0x1d, 0xae, 0xd4, 0x53, 0xb6, 0x24, 0xc4, 0x00, 0xed, 0xd3, 0xfd, 0xf9, 0xc5, 0xa4, 0xbb,
                                                                0x35, 0xd1, 0xc5, 0x12, 0x5b, 0xe9, 0xf7, 0xf2, 0x41, 0xb9, 0x82, 0x61, 0xa5, 0xba, 0xf9, 0x81, };

    BUFFER::BUFFER_T<packet_size>       input_1a            = { 0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0xe8, 0xe0, 0xd8, 0xab, 0xf6, 0x65, 0xf9, 0xa2, 0x60, 0x18, 0x70, 0x96, 0xd5, 0xc5, 0x28, 0x38,
                                                                0x15, 0x36, 0x61, 0x1a, 0x27, 0xb0, 0xab, 0xb5, 0x6a, 0xfe, 0x3a, 0xce, 0x8d, 0x3f, 0xb1, 0x27,
                                                                0xb0, 0x28, 0x78, 0x8e, 0x4b, 0x7e, 0x23, 0xfb, 0xda, 0x13, 0x50, 0xf9, 0x55, 0xd9, 0xa0, 0x20,
                                                                0xd7, 0xc1, 0xdf, 0xac, 0x53, 0x30, 0xc0, 0xf8, 0xa9, 0xbd, 0x3e, 0xa1, 0x41, 0xe1, 0xfc, 0x67,
                                                                0x3e, 0x01, 0x7e, 0x97, 0xea, 0xdc, 0x6b, 0x96, 0x8f, 0x38, 0x5c, 0x2a, 0xec, 0xb0, 0x3b, 0xfb,
                                                                0x32, 0xaf, 0x3c, 0x54, 0xec, 0x18, 0xdb, 0x5c, 0x02, 0x1a, 0xfe, 0x43, 0xfb, 0xfa, 0xaa, 0x3a,
                                                                0xfb, 0x29, 0xd1, 0xe6, 0x05, 0x3c, 0x7c, 0x94, 0x75, 0xd8, 0xbe, 0x61, 0x89, 0xf9, 0x5c, 0xbb, };

    BUFFER::BUFFER_T<packet_size>       input_2a            = { 0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0xff, 0x8c, 0x23, 0xe1, 0xf8, 0xf9, 0x24, 0xe5, 0x62, 0x4d, 0xce, 0xb2, 0xa5, 0xbb, 0x40, 0x8d,
                                                                0x3f, 0x46, 0xa3, 0xc9, 0x2f, 0xd4, 0x50, 0x80, 0x30, 0x98, 0xdb, 0x61, 0x67, 0x3b, 0x10, 0x67,
                                                                0x6b, 0x36, 0x86, 0x63, 0xb9, 0xad, 0x86, 0x06, 0xa0, 0x47, 0x98, 0x03, 0xb2, 0xf9, 0x81, 0xe9,
                                                                0x67, 0x22, 0x22, 0x14, 0x2e, 0xb6, 0xb4, 0xe6, 0xd6, 0xc1, 0xd1, 0x58, 0x01, 0xa1, 0xe0, 0xab,
                                                                0x9c, 0xc9, 0x95, 0x50, 0x72, 0x9e, 0xda, 0x7f, 0xe0, 0xd2, 0xa0, 0x8c, 0xe2, 0xa9, 0x34, 0x3a,
                                                                0xc7, 0x28, 0xf4, 0xb2, 0xb2, 0x19, 0xce, 0xc0, 0xa1, 0xad, 0x08, 0xe3, 0x07, 0x28, 0x56, 0x68,
                                                                0x90, 0x2c, 0xbf, 0x46, 0x93, 0x13, 0x10, 0xd2, 0x60, 0x70, 0x32, 0x82, 0x58, 0x02, 0x84, 0x07, };

    uint8_t                             expected_frame_a[]  = { 0xc1, 0x2d, 0x62, 0x00, 0x04, 0x9e, 0x1a, 0xe4, 0x1c, 0xda, 0x24, 0x6e, 0xce, 0x2d, 0xcf, 0xb5,
                                                                0x63, 0x6c, 0x4f, 0x79, 0x14, 0x2f, 0x62, 0x2f, 0x0c, 0xcc, 0x37, 0x79, 0xbc, 0x67, 0x12, 0x7d,
                                                                0x95, 0x75, 0x7d, 0x99, 0x13, 0x97, 0x7d, 0x2f, 0x71, 0xa1, 0x9d, 0x3f, 0xce, 0x6d, 0xf4, 0x31,
                                                                0xd9, 0x43, 0xab, 0xed, 0x72, 0x0d, 0x1c, 0x7f, 0xd9, 0x54, 0xf8, 0x95, 0xbb, 0x0a, 0x12, 0x50,
                                                                0x7f, 0x8f, 0xe9, 0x92, 0x26, 0x66, 0xc1, 0x97, 0x07, 0x5f, 0xd6, 0xd6, 0xcc, 0xca, 0x07, 0xa5,
                                                                0x0e, 0xb2, 0x92, 0x80, 0xbf, 0xae, 0xff, 0x98, 0x02, 0xf7, 0x2d, 0xbe, 0x02, 0x3f, 0x0e, 0x81,
                                                                0xce, 0xf8, 0x14, 0xf4, 0x5e, 0xd5, 0x8b, 0x66, 0x34, 0x61, 0x3c, 0x00, 0x2c, 0x43, 0xa5, 0x3a,
                                                                0x70, 0x69, 0x8e, 0x26, 0xf1, 0x48, 0xc9, 0x3f, 0xc3, 0xc8, 0x98, 0x1f, 0x00, 0x77, 0xd7, 0x7e,
                                                                0x21, 0xa9, 0xa7, 0xda, 0xde, 0x98, 0x91, 0x7e, 0xad, 0x9f, 0x8c, 0xb0, 0xb7, 0xcc, 0x59, 0x39,
                                                                0xef, 0x2b, 0x58, 0x6a, 0x1f, 0xa9, 0x2a, 0x01, 0xae, 0x08, 0x2f, 0x91, 0xe1, 0xb7, 0x32, 0xd8,
                                                                0x48, 0x69, 0xe6, 0xb6, 0xf2, 0x33, 0x15, 0xe7, 0xff, 0x0c, 0x6b, 0xf3, 0xf3, 0x5a, 0x03, 0xed,
                                                                0xe0, 0x0b, 0xc1, 0xa8, 0x69, 0x76, 0x3d, 0xf2, 0x96, 0x88, 0x8e, 0xef, 0xd1, 0x36, 0xfd, 0xa0,
                                                                0xa1, 0x1a, 0xf9, 0x05, 0x83, 0x41, 0x6d, 0x9a, 0x84, 0xf0, 0x0d, 0xf4, 0x5f, 0xc1, 0x08, 0xbc,
                                                                0x3b, 0x9e, 0x72, 0x80, 0x08, 0xa7, 0x44, 0xc3, 0x6e, 0xf2, 0x46, 0xc3, 0x79, 0x3f, 0x58, 0x80,
                                                                0x56, 0x31, 0x1d, 0x40, 0xb9, 0x18, 0xd8, 0x82, 0x5c, 0x4c, 0xb0, 0x25, 0x4f, 0x67, 0x2b, 0x1b,
                                                                0xb0, 0x7e, 0xff, 0xe3, 0xc3, 0x64, 0x6b, 0x7b, 0x02, 0x37, 0xe7, 0x35, 0x8b, 0x23, 0xcb, 0x3b, };

    BUFFER::BUFFER_T<packet_size>       input_0b            = { 0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x29, 0xcd, 0xba, 0xab, 0xf2, 0xfb, 0xe3, 0x46, 0x7c, 0xc2, 0x54, 0xf8, 0x1b, 0xe8, 0xe7, 0x8d,
                                                                0x76, 0x5a, 0x2e, 0x63, 0x33, 0x9f, 0xc9, 0x9a, 0x66, 0x32, 0x0d, 0xb7, 0x31, 0x29, 0xcd, 0xba,
                                                                0xab, 0xf2, 0xfb, 0xe3, 0x46, 0x7c, 0xc2, 0x54, 0xf8, 0x1b, 0xe8, 0xe7, 0x8d, 0x76, 0x5a, 0x2e,
                                                                0x63, 0x33, 0x9f, 0xc9, 0x9a, 0x66, 0x32, 0x0d, 0xb7, 0x31, 0xc6, 0x34, 0xfa, 0xeb, 0xee, 0x37,
                                                                0x41, 0x8e, 0x97, 0x05, 0xcc, 0xba, 0xaa, 0x01, 0x88, 0x67, 0x8a, 0xfc, 0x20, 0x7a, 0x3c, 0x5e,
                                                                0x3c, 0x1d, 0xae, 0xd4, 0x53, 0xb6, 0x24, 0xc4, 0x00, 0xed, 0xd3, 0xfd, 0xf9, 0xc5, 0xa4, 0xbb,
                                                                0x35, 0xd1, 0xc5, 0x12, 0x5b, 0xe9, 0xf7, 0xf2, 0x41, 0xb9, 0x82, 0x61, 0xa5, 0xba, 0xf9, 0x81, };

    BUFFER::BUFFER_T<packet_size>       input_1b            = { 0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0xe8, 0xe0, 0xd8, 0xab, 0xf6, 0x65, 0xf9, 0xa2, 0x60, 0x18, 0x70, 0x96, 0xd5, 0xc5, 0x28, 0x38,
                                                                0x15, 0x36, 0x61, 0x1a, 0x27, 0xb0, 0xab, 0xb5, 0x6a, 0xfe, 0x3a, 0xce, 0x8d, 0xe8, 0xe0, 0xd8,
                                                                0xab, 0xf6, 0x65, 0xf9, 0xa2, 0x60, 0x18, 0x70, 0x96, 0xd5, 0xc5, 0x28, 0x38, 0x15, 0x36, 0x61,
                                                                0x1a, 0x27, 0xb0, 0xab, 0xb5, 0x6a, 0xfe, 0x3a, 0xce, 0x8d, 0x3e, 0xa1, 0x41, 0xe1, 0xfc, 0x67,
                                                                0x3e, 0x01, 0x7e, 0x97, 0xea, 0xdc, 0x6b, 0x96, 0x8f, 0x38, 0x5c, 0x2a, 0xec, 0xb0, 0x3b, 0xfb,
                                                                0x32, 0xaf, 0x3c, 0x54, 0xec, 0x18, 0xdb, 0x5c, 0x02, 0x1a, 0xfe, 0x43, 0xfb, 0xfa, 0xaa, 0x3a,
                                                                0xfb, 0x29, 0xd1, 0xe6, 0x05, 0x3c, 0x7c, 0x94, 0x75, 0xd8, 0xbe, 0x61, 0x89, 0xf9, 0x5c, 0xbb, };

    BUFFER::BUFFER_T<packet_size>       input_2b            = { 0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0x00, 0x00, 0x00, 0x00,
                                                                0xff, 0x8c, 0x23, 0xe1, 0xf8, 0xf9, 0x24, 0xe5, 0x62, 0x4d, 0xce, 0xb2, 0xa5, 0xbb, 0x40, 0x8d,
                                                                0x3f, 0x46, 0xa3, 0xc9, 0x2f, 0xd4, 0x50, 0x80, 0x30, 0x98, 0xdb, 0x61, 0x67, 0xff, 0x8c, 0x23,
                                                                0xe1, 0xf8, 0xf9, 0x24, 0xe5, 0x62, 0x4d, 0xce, 0xb2, 0xa5, 0xbb, 0x40, 0x8d, 0x3f, 0x46, 0xa3,
                                                                0xc9, 0x2f, 0xd4, 0x50, 0x80, 0x30, 0x98, 0xdb, 0x61, 0x67, 0xd1, 0x58, 0x01, 0xa1, 0xe0, 0xab,
                                                                0x9c, 0xc9, 0x95, 0x50, 0x72, 0x9e, 0xda, 0x7f, 0xe0, 0xd2, 0xa0, 0x8c, 0xe2, 0xa9, 0x34, 0x3a,
                                                                0xc7, 0x28, 0xf4, 0xb2, 0xb2, 0x19, 0xce, 0xc0, 0xa1, 0xad, 0x08, 0xe3, 0x07, 0x28, 0x56, 0x68,
                                                                0x90, 0x2c, 0xbf, 0x46, 0x93, 0x13, 0x10, 0xd2, 0x60, 0x70, 0x32, 0x82, 0x58, 0x02, 0x84, 0x07, };

    uint8_t                             expected_frame_b[]  = { 0xc1, 0x2d, 0x62, 0x00, 0x04, 0x9e, 0x1a, 0xe4, 0x1c, 0xda, 0x24, 0x6e, 0xce, 0x2d, 0xcf, 0xb5,
                                                                0x63, 0x6c, 0x4f, 0x79, 0x14, 0x2f, 0x62, 0x2f, 0x0c, 0xcc, 0x37, 0x79, 0xbc, 0xc1, 0x2d, 0x62,
                                                                0x00, 0x04, 0x9e, 0x1a, 0xe4, 0x1c, 0xda, 0x24, 0x6e, 0xce, 0x2d, 0xcf, 0xb5, 0x63, 0x6c, 0x4f,
                                                                0x79, 0x14, 0x2f, 0x62, 0x2f, 0x0c, 0xcc, 0x37, 0x79, 0xbc, 0xf8, 0x95, 0xbb, 0x0a, 0x12, 0x50,
                                                                0x7f, 0x8f, 0xe9, 0x92, 0x26, 0x66, 0xc1, 0x97, 0x07, 0x5f, 0xd6, 0xd6, 0xcc, 0xca, 0x07, 0xa5,
                                                                0x0e, 0xb2, 0x92, 0x80, 0xbf, 0xae, 0xff, 0x98, 0x02, 0xf7, 0x2d, 0xbe, 0x02, 0x3f, 0x0e, 0x81,
                                                                0xce, 0xf8, 0x14, 0xf4, 0x5e, 0xd5, 0x8b, 0x66, 0x34, 0x61, 0x3c, 0x00, 0x2c, 0x43, 0xa5, 0x3a,
                                                                0x00, 0x17, 0x8e, 0x26, 0xf1, 0x48, 0xc9, 0x3f, 0xc3, 0xc8, 0x98, 0x1f, 0x00, 0x77, 0xd7, 0x7e,
                                                                0x21, 0xa9, 0xa7, 0xda, 0xde, 0x98, 0x91, 0x7e, 0xad, 0x9f, 0x8c, 0xb0, 0xb7, 0x79, 0xab, 0x9d,
                                                                0xeb, 0x4a, 0xd9, 0xd9, 0x5d, 0xf3, 0x7d, 0x49, 0xef, 0x43, 0x29, 0xf3, 0xc8, 0xb3, 0xfb, 0xad,
                                                                0x8b, 0xd5, 0xfb, 0x7a, 0xe7, 0xee, 0xd7, 0x50, 0x48, 0xaa, 0x6b, 0xf3, 0xf3, 0x5a, 0x03, 0xed,
                                                                0xe0, 0x0b, 0xc1, 0xa8, 0x69, 0x76, 0x3d, 0xf2, 0x96, 0x88, 0x8e, 0xef, 0xd1, 0x36, 0xfd, 0xa0,
                                                                0xa1, 0x1a, 0xf9, 0x05, 0x83, 0x30, 0x03, 0x7a, 0x0a, 0x5f, 0xf3, 0x00, 0x41, 0x54, 0x94, 0x3c,
                                                                0x68, 0x37, 0x57, 0xa1, 0x1e, 0x65, 0x4a, 0xfc, 0x03, 0x43, 0xad, 0x4b, 0xc2, 0x64, 0xb6, 0x0a,
                                                                0x31, 0x01, 0x1d, 0x40, 0xb9, 0x18, 0xd8, 0x82, 0x5c, 0x4c, 0xb0, 0x25, 0x4f, 0x67, 0x2b, 0x1b,
                                                                0xb0, 0x7e, 0xff, 0xe3, 0xc3, 0x64, 0x6b, 0x7b, 0x02, 0x37, 0xe7, 0x35, 0x8b, 0xe7, 0x57, 0x7f, };

    uint8_t                             actual_frame[width * height]{};
    MULTIPATH::MpFrame<packet_size,
                       width,
                       height>          frame;

    Endianness::hton32(input_0a.Offset, 0u);
    Endianness::hton32(input_1a.Offset, 0u);

    if (!frame.set(input_0a, MULTIPATH::TYPE_SINGLE::TYPE_0))
    {
        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return true;
    }

    if (!frame.set(input_1a, MULTIPATH::TYPE_SINGLE::TYPE_1))
    {

        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return true;
    }

    Endianness::hton32(input_0a.Offset, sizeof(BUFFER::BUFFER_T<packet_size>::Data));
    Endianness::hton32(input_2a.Offset, sizeof(BUFFER::BUFFER_T<packet_size>::Data));

    if (!frame.set(input_0a, MULTIPATH::TYPE_SINGLE::TYPE_0))
    {
        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return true;
    }

    if (!frame.set(input_2a, MULTIPATH::TYPE_SINGLE::TYPE_2))
    {

        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return true;
    }

    Endianness::hton32(input_1a.Offset, 2u * sizeof(BUFFER::BUFFER_T<packet_size>::Data));
    Endianness::hton32(input_2a.Offset, 2u * sizeof(BUFFER::BUFFER_T<packet_size>::Data));

    if (!frame.set(input_1a, MULTIPATH::TYPE_SINGLE::TYPE_1))
    {
        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return true;
    }

    if (!frame.set(input_2a, MULTIPATH::TYPE_SINGLE::TYPE_2))
    {

        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return true;
    }

    if (!frame.get(actual_frame, 0u))
    {
        fprintf(stderr, "%s:%d:%s: Failed to get\n", __FILE__, __LINE__, __FUNCTION__);
        return true;
    }

    if (memcmp(actual_frame, expected_frame_a, sizeof(expected_frame_a)))
    {
        fprintf(stderr, "%s:%d:%s: Incorrect frame\n", __FILE__, __LINE__, __FUNCTION__);
        return true;
    }

    Endianness::hton32(input_0b.Offset, 0u);
    Endianness::hton32(input_1b.Offset, 0u);

    if (!frame.set(input_1b, MULTIPATH::TYPE_SINGLE::TYPE_1))
    {
        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return true;
    }

    if (!frame.set(input_0b, MULTIPATH::TYPE_SINGLE::TYPE_0))
    {

        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return true;
    }

    Endianness::hton32(input_0b.Offset, sizeof(BUFFER::BUFFER_T<packet_size>::Data));
    Endianness::hton32(input_2b.Offset, sizeof(BUFFER::BUFFER_T<packet_size>::Data));

    if (!frame.set(input_2b, MULTIPATH::TYPE_SINGLE::TYPE_2))
    {
        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return true;
    }

    if (!frame.set(input_0b, MULTIPATH::TYPE_SINGLE::TYPE_0))
    {

        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return true;
    }

    Endianness::hton32(input_1b.Offset, 2u * sizeof(BUFFER::BUFFER_T<packet_size>::Data));
    Endianness::hton32(input_2b.Offset, 2u * sizeof(BUFFER::BUFFER_T<packet_size>::Data));

    if (!frame.set(input_2b, MULTIPATH::TYPE_SINGLE::TYPE_2))
    {
        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return true;
    }

    if (!frame.set(input_1b, MULTIPATH::TYPE_SINGLE::TYPE_1))
    {

        fprintf(stderr, "%s:%d:%s: Failed to set\n", __FILE__, __LINE__, __FUNCTION__);
        return true;
    }

    if (!frame.get(actual_frame, 0u))
    {
        fprintf(stderr, "%s:%d:%s: Failed to get\n", __FILE__, __LINE__, __FUNCTION__);
        return true;
    }

    if (memcmp(actual_frame, expected_frame_b, sizeof(expected_frame_b)))
    {
        fprintf(stderr, "%s:%d:%s: Incorrect frame\n", __FILE__, __LINE__, __FUNCTION__);
        return true;
    }

    return true;
}


int main(int argc, char** argv)
{
    if (!test_setting_single_frame_forward())
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    if (!test_setting_single_frame_backward())
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    if (!test_setting_frame_twice())
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    return 0;
}
